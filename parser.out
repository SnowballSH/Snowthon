Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON

Grammar

Rule 0     S' -> calc
Rule 1     calc -> expr
Rule 2     calc -> var_assign
Rule 3     calc -> func_assign
Rule 4     calc -> cout
Rule 5     calc -> empty
Rule 6     expr -> LPAREN expr PLUS expr RPAREN
Rule 7     expr -> LPAREN expr MINUS expr RPAREN
Rule 8     expr -> LPAREN expr MULTIPLY expr RPAREN
Rule 9     expr -> LPAREN expr DIVIDE expr RPAREN
Rule 10    expr -> LPAREN expr INTDIV expr RPAREN
Rule 11    expr -> LPAREN expr DBEQ expr RPAREN
Rule 12    expr -> LPAREN expr EXEQ expr RPAREN
Rule 13    expr -> LPAREN expr LT expr RPAREN
Rule 14    expr -> LPAREN expr GT expr RPAREN
Rule 15    expr -> LPAREN EX expr RPAREN
Rule 16    multi_calc -> multi_calc LINE calc
Rule 17    multi_calc -> calc
Rule 18    expr -> expr MULTIPLY expr
Rule 19    expr -> expr DIVIDE expr
Rule 20    expr -> expr INTDIV expr
Rule 21    expr -> expr PLUS expr
Rule 22    expr -> expr MINUS expr
Rule 23    expr -> expr DBEQ expr
Rule 24    expr -> expr EXEQ expr
Rule 25    expr -> expr LT expr
Rule 26    expr -> expr GT expr
Rule 27    expr -> EX expr
Rule 28    expr -> PLUS expr
Rule 29    expr -> MINUS expr
Rule 30    expr -> INT
Rule 31    expr -> FLOAT
Rule 32    multi_expr -> multi_expr COMMA expr
Rule 33    multi_expr -> expr
Rule 34    multi_expr -> empty
Rule 35    expr -> STRING
Rule 36    multi_id -> multi_id COMMA ID
Rule 37    multi_id -> ID
Rule 38    multi_id -> empty
Rule 39    calc -> IF LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY
Rule 40    calc -> IF LPAREN expr RPAREN LCURLY multi_calc RCURLY
Rule 41    var_assign -> LET ID EQ expr
Rule 42    func_assign -> FUNC ID LPAREN multi_id RPAREN LCURLY multi_calc RCURLY
Rule 43    cout -> OUTPUT DBLT expr
Rule 44    expr -> INPUT
Rule 45    var_assign -> ID DBLT INPUT
Rule 46    calc -> ID LPAREN multi_expr RPAREN
Rule 47    expr -> ID
Rule 48    empty -> <empty>

Terminals, with rules where they appear

COLON                : 
COMMA                : 32 36
DBEQ                 : 11 23
DBLT                 : 43 45
DIVIDE               : 9 19
ELSE                 : 39
EQ                   : 41
EX                   : 15 27
EXEQ                 : 12 24
FLOAT                : 31
FUNC                 : 42
GT                   : 14 26
ID                   : 36 37 41 42 45 46 47
IF                   : 39 40
INPUT                : 44 45
INT                  : 30
INTDIV               : 10 20
LCURLY               : 39 40 42
LET                  : 41
LINE                 : 16
LPAREN               : 6 7 8 9 10 11 12 13 14 15 39 40 42 46
LT                   : 13 25
MINUS                : 7 22 29
MULTIPLY             : 8 18
OUTPUT               : 43
PLUS                 : 6 21 28
RCURLY               : 39 40 42
RPAREN               : 6 7 8 9 10 11 12 13 14 15 39 40 42 46
STRING               : 35
error                : 

Nonterminals, with rules where they appear

calc                 : 16 17 0
cout                 : 4
empty                : 5 34 38
expr                 : 1 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 28 29 32 33 39 40 41 43
func_assign          : 3
multi_calc           : 16 39 39 40 42
multi_expr           : 32 46
multi_id             : 36 42
var_assign           : 2

Parsing method: LALR

state 0

    (0) S' -> . calc
    (1) calc -> . expr
    (2) calc -> . var_assign
    (3) calc -> . func_assign
    (4) calc -> . cout
    (5) calc -> . empty
    (39) calc -> . IF LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY
    (40) calc -> . IF LPAREN expr RPAREN LCURLY multi_calc RCURLY
    (46) calc -> . ID LPAREN multi_expr RPAREN
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID
    (41) var_assign -> . LET ID EQ expr
    (45) var_assign -> . ID DBLT INPUT
    (42) func_assign -> . FUNC ID LPAREN multi_id RPAREN LCURLY multi_calc RCURLY
    (43) cout -> . OUTPUT DBLT expr
    (48) empty -> .

    IF              shift and go to state 7
    ID              shift and go to state 9
    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    LET             shift and go to state 17
    FUNC            shift and go to state 18
    OUTPUT          shift and go to state 19
    $end            reduce using rule 48 (empty -> .)

    calc                           shift and go to state 1
    expr                           shift and go to state 2
    var_assign                     shift and go to state 3
    func_assign                    shift and go to state 4
    cout                           shift and go to state 5
    empty                          shift and go to state 6

state 1

    (0) S' -> calc .



state 2

    (1) calc -> expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    $end            reduce using rule 1 (calc -> expr .)
    ELSE            reduce using rule 1 (calc -> expr .)
    RCURLY          reduce using rule 1 (calc -> expr .)
    LINE            reduce using rule 1 (calc -> expr .)
    MULTIPLY        shift and go to state 20
    DIVIDE          shift and go to state 21
    INTDIV          shift and go to state 22
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    DBEQ            shift and go to state 25
    EXEQ            shift and go to state 26
    LT              shift and go to state 27
    GT              shift and go to state 28


state 3

    (2) calc -> var_assign .

    $end            reduce using rule 2 (calc -> var_assign .)
    ELSE            reduce using rule 2 (calc -> var_assign .)
    RCURLY          reduce using rule 2 (calc -> var_assign .)
    LINE            reduce using rule 2 (calc -> var_assign .)


state 4

    (3) calc -> func_assign .

    $end            reduce using rule 3 (calc -> func_assign .)
    ELSE            reduce using rule 3 (calc -> func_assign .)
    RCURLY          reduce using rule 3 (calc -> func_assign .)
    LINE            reduce using rule 3 (calc -> func_assign .)


state 5

    (4) calc -> cout .

    $end            reduce using rule 4 (calc -> cout .)
    ELSE            reduce using rule 4 (calc -> cout .)
    RCURLY          reduce using rule 4 (calc -> cout .)
    LINE            reduce using rule 4 (calc -> cout .)


state 6

    (5) calc -> empty .

    $end            reduce using rule 5 (calc -> empty .)
    ELSE            reduce using rule 5 (calc -> empty .)
    RCURLY          reduce using rule 5 (calc -> empty .)
    LINE            reduce using rule 5 (calc -> empty .)


state 7

    (39) calc -> IF . LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY
    (40) calc -> IF . LPAREN expr RPAREN LCURLY multi_calc RCURLY

    LPAREN          shift and go to state 29


state 8

    (6) expr -> LPAREN . expr PLUS expr RPAREN
    (7) expr -> LPAREN . expr MINUS expr RPAREN
    (8) expr -> LPAREN . expr MULTIPLY expr RPAREN
    (9) expr -> LPAREN . expr DIVIDE expr RPAREN
    (10) expr -> LPAREN . expr INTDIV expr RPAREN
    (11) expr -> LPAREN . expr DBEQ expr RPAREN
    (12) expr -> LPAREN . expr EXEQ expr RPAREN
    (13) expr -> LPAREN . expr LT expr RPAREN
    (14) expr -> LPAREN . expr GT expr RPAREN
    (15) expr -> LPAREN . EX expr RPAREN
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    EX              shift and go to state 31
    LPAREN          shift and go to state 8
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 30

state 9

    (46) calc -> ID . LPAREN multi_expr RPAREN
    (47) expr -> ID .
    (45) var_assign -> ID . DBLT INPUT

    LPAREN          shift and go to state 33
    MULTIPLY        reduce using rule 47 (expr -> ID .)
    DIVIDE          reduce using rule 47 (expr -> ID .)
    INTDIV          reduce using rule 47 (expr -> ID .)
    PLUS            reduce using rule 47 (expr -> ID .)
    MINUS           reduce using rule 47 (expr -> ID .)
    DBEQ            reduce using rule 47 (expr -> ID .)
    EXEQ            reduce using rule 47 (expr -> ID .)
    LT              reduce using rule 47 (expr -> ID .)
    GT              reduce using rule 47 (expr -> ID .)
    $end            reduce using rule 47 (expr -> ID .)
    ELSE            reduce using rule 47 (expr -> ID .)
    RCURLY          reduce using rule 47 (expr -> ID .)
    LINE            reduce using rule 47 (expr -> ID .)
    DBLT            shift and go to state 34


state 10

    (28) expr -> PLUS . expr
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 35

state 11

    (29) expr -> MINUS . expr
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 36

state 12

    (27) expr -> EX . expr
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 37

state 13

    (30) expr -> INT .

    MULTIPLY        reduce using rule 30 (expr -> INT .)
    DIVIDE          reduce using rule 30 (expr -> INT .)
    INTDIV          reduce using rule 30 (expr -> INT .)
    PLUS            reduce using rule 30 (expr -> INT .)
    MINUS           reduce using rule 30 (expr -> INT .)
    DBEQ            reduce using rule 30 (expr -> INT .)
    EXEQ            reduce using rule 30 (expr -> INT .)
    LT              reduce using rule 30 (expr -> INT .)
    GT              reduce using rule 30 (expr -> INT .)
    $end            reduce using rule 30 (expr -> INT .)
    RPAREN          reduce using rule 30 (expr -> INT .)
    COMMA           reduce using rule 30 (expr -> INT .)
    ELSE            reduce using rule 30 (expr -> INT .)
    RCURLY          reduce using rule 30 (expr -> INT .)
    LINE            reduce using rule 30 (expr -> INT .)


state 14

    (31) expr -> FLOAT .

    MULTIPLY        reduce using rule 31 (expr -> FLOAT .)
    DIVIDE          reduce using rule 31 (expr -> FLOAT .)
    INTDIV          reduce using rule 31 (expr -> FLOAT .)
    PLUS            reduce using rule 31 (expr -> FLOAT .)
    MINUS           reduce using rule 31 (expr -> FLOAT .)
    DBEQ            reduce using rule 31 (expr -> FLOAT .)
    EXEQ            reduce using rule 31 (expr -> FLOAT .)
    LT              reduce using rule 31 (expr -> FLOAT .)
    GT              reduce using rule 31 (expr -> FLOAT .)
    $end            reduce using rule 31 (expr -> FLOAT .)
    RPAREN          reduce using rule 31 (expr -> FLOAT .)
    COMMA           reduce using rule 31 (expr -> FLOAT .)
    ELSE            reduce using rule 31 (expr -> FLOAT .)
    RCURLY          reduce using rule 31 (expr -> FLOAT .)
    LINE            reduce using rule 31 (expr -> FLOAT .)


state 15

    (35) expr -> STRING .

    MULTIPLY        reduce using rule 35 (expr -> STRING .)
    DIVIDE          reduce using rule 35 (expr -> STRING .)
    INTDIV          reduce using rule 35 (expr -> STRING .)
    PLUS            reduce using rule 35 (expr -> STRING .)
    MINUS           reduce using rule 35 (expr -> STRING .)
    DBEQ            reduce using rule 35 (expr -> STRING .)
    EXEQ            reduce using rule 35 (expr -> STRING .)
    LT              reduce using rule 35 (expr -> STRING .)
    GT              reduce using rule 35 (expr -> STRING .)
    $end            reduce using rule 35 (expr -> STRING .)
    RPAREN          reduce using rule 35 (expr -> STRING .)
    COMMA           reduce using rule 35 (expr -> STRING .)
    ELSE            reduce using rule 35 (expr -> STRING .)
    RCURLY          reduce using rule 35 (expr -> STRING .)
    LINE            reduce using rule 35 (expr -> STRING .)


state 16

    (44) expr -> INPUT .

    MULTIPLY        reduce using rule 44 (expr -> INPUT .)
    DIVIDE          reduce using rule 44 (expr -> INPUT .)
    INTDIV          reduce using rule 44 (expr -> INPUT .)
    PLUS            reduce using rule 44 (expr -> INPUT .)
    MINUS           reduce using rule 44 (expr -> INPUT .)
    DBEQ            reduce using rule 44 (expr -> INPUT .)
    EXEQ            reduce using rule 44 (expr -> INPUT .)
    LT              reduce using rule 44 (expr -> INPUT .)
    GT              reduce using rule 44 (expr -> INPUT .)
    $end            reduce using rule 44 (expr -> INPUT .)
    RPAREN          reduce using rule 44 (expr -> INPUT .)
    COMMA           reduce using rule 44 (expr -> INPUT .)
    ELSE            reduce using rule 44 (expr -> INPUT .)
    RCURLY          reduce using rule 44 (expr -> INPUT .)
    LINE            reduce using rule 44 (expr -> INPUT .)


state 17

    (41) var_assign -> LET . ID EQ expr

    ID              shift and go to state 38


state 18

    (42) func_assign -> FUNC . ID LPAREN multi_id RPAREN LCURLY multi_calc RCURLY

    ID              shift and go to state 39


state 19

    (43) cout -> OUTPUT . DBLT expr

    DBLT            shift and go to state 40


state 20

    (18) expr -> expr MULTIPLY . expr
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 41

state 21

    (19) expr -> expr DIVIDE . expr
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 42

state 22

    (20) expr -> expr INTDIV . expr
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 43

state 23

    (21) expr -> expr PLUS . expr
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 44

state 24

    (22) expr -> expr MINUS . expr
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 45

state 25

    (23) expr -> expr DBEQ . expr
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 46

state 26

    (24) expr -> expr EXEQ . expr
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 47

state 27

    (25) expr -> expr LT . expr
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 48

state 28

    (26) expr -> expr GT . expr
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 49

state 29

    (39) calc -> IF LPAREN . expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY
    (40) calc -> IF LPAREN . expr RPAREN LCURLY multi_calc RCURLY
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 50

state 30

    (6) expr -> LPAREN expr . PLUS expr RPAREN
    (7) expr -> LPAREN expr . MINUS expr RPAREN
    (8) expr -> LPAREN expr . MULTIPLY expr RPAREN
    (9) expr -> LPAREN expr . DIVIDE expr RPAREN
    (10) expr -> LPAREN expr . INTDIV expr RPAREN
    (11) expr -> LPAREN expr . DBEQ expr RPAREN
    (12) expr -> LPAREN expr . EXEQ expr RPAREN
    (13) expr -> LPAREN expr . LT expr RPAREN
    (14) expr -> LPAREN expr . GT expr RPAREN
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    INTDIV          shift and go to state 55
    DBEQ            shift and go to state 56
    EXEQ            shift and go to state 57
    LT              shift and go to state 58
    GT              shift and go to state 59


state 31

    (15) expr -> LPAREN EX . expr RPAREN
    (27) expr -> EX . expr
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 60

state 32

    (47) expr -> ID .

    PLUS            reduce using rule 47 (expr -> ID .)
    MINUS           reduce using rule 47 (expr -> ID .)
    MULTIPLY        reduce using rule 47 (expr -> ID .)
    DIVIDE          reduce using rule 47 (expr -> ID .)
    INTDIV          reduce using rule 47 (expr -> ID .)
    DBEQ            reduce using rule 47 (expr -> ID .)
    EXEQ            reduce using rule 47 (expr -> ID .)
    LT              reduce using rule 47 (expr -> ID .)
    GT              reduce using rule 47 (expr -> ID .)
    $end            reduce using rule 47 (expr -> ID .)
    RPAREN          reduce using rule 47 (expr -> ID .)
    COMMA           reduce using rule 47 (expr -> ID .)
    ELSE            reduce using rule 47 (expr -> ID .)
    RCURLY          reduce using rule 47 (expr -> ID .)
    LINE            reduce using rule 47 (expr -> ID .)


state 33

    (46) calc -> ID LPAREN . multi_expr RPAREN
    (32) multi_expr -> . multi_expr COMMA expr
    (33) multi_expr -> . expr
    (34) multi_expr -> . empty
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID
    (48) empty -> .

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32
    RPAREN          reduce using rule 48 (empty -> .)
    COMMA           reduce using rule 48 (empty -> .)

    multi_expr                     shift and go to state 61
    expr                           shift and go to state 62
    empty                          shift and go to state 63

state 34

    (45) var_assign -> ID DBLT . INPUT

    INPUT           shift and go to state 64


state 35

    (28) expr -> PLUS expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    PLUS            reduce using rule 28 (expr -> PLUS expr .)
    MINUS           reduce using rule 28 (expr -> PLUS expr .)
    $end            reduce using rule 28 (expr -> PLUS expr .)
    RPAREN          reduce using rule 28 (expr -> PLUS expr .)
    COMMA           reduce using rule 28 (expr -> PLUS expr .)
    ELSE            reduce using rule 28 (expr -> PLUS expr .)
    RCURLY          reduce using rule 28 (expr -> PLUS expr .)
    LINE            reduce using rule 28 (expr -> PLUS expr .)
    MULTIPLY        shift and go to state 20
    DIVIDE          shift and go to state 21
    INTDIV          shift and go to state 22
    DBEQ            shift and go to state 25
    EXEQ            shift and go to state 26
    LT              shift and go to state 27
    GT              shift and go to state 28

  ! MULTIPLY        [ reduce using rule 28 (expr -> PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 28 (expr -> PLUS expr .) ]
  ! INTDIV          [ reduce using rule 28 (expr -> PLUS expr .) ]
  ! DBEQ            [ reduce using rule 28 (expr -> PLUS expr .) ]
  ! EXEQ            [ reduce using rule 28 (expr -> PLUS expr .) ]
  ! LT              [ reduce using rule 28 (expr -> PLUS expr .) ]
  ! GT              [ reduce using rule 28 (expr -> PLUS expr .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]


state 36

    (29) expr -> MINUS expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    PLUS            reduce using rule 29 (expr -> MINUS expr .)
    MINUS           reduce using rule 29 (expr -> MINUS expr .)
    $end            reduce using rule 29 (expr -> MINUS expr .)
    RPAREN          reduce using rule 29 (expr -> MINUS expr .)
    COMMA           reduce using rule 29 (expr -> MINUS expr .)
    ELSE            reduce using rule 29 (expr -> MINUS expr .)
    RCURLY          reduce using rule 29 (expr -> MINUS expr .)
    LINE            reduce using rule 29 (expr -> MINUS expr .)
    MULTIPLY        shift and go to state 20
    DIVIDE          shift and go to state 21
    INTDIV          shift and go to state 22
    DBEQ            shift and go to state 25
    EXEQ            shift and go to state 26
    LT              shift and go to state 27
    GT              shift and go to state 28

  ! MULTIPLY        [ reduce using rule 29 (expr -> MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 29 (expr -> MINUS expr .) ]
  ! INTDIV          [ reduce using rule 29 (expr -> MINUS expr .) ]
  ! DBEQ            [ reduce using rule 29 (expr -> MINUS expr .) ]
  ! EXEQ            [ reduce using rule 29 (expr -> MINUS expr .) ]
  ! LT              [ reduce using rule 29 (expr -> MINUS expr .) ]
  ! GT              [ reduce using rule 29 (expr -> MINUS expr .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]


state 37

    (27) expr -> EX expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    MULTIPLY        reduce using rule 27 (expr -> EX expr .)
    DIVIDE          reduce using rule 27 (expr -> EX expr .)
    INTDIV          reduce using rule 27 (expr -> EX expr .)
    PLUS            reduce using rule 27 (expr -> EX expr .)
    MINUS           reduce using rule 27 (expr -> EX expr .)
    DBEQ            reduce using rule 27 (expr -> EX expr .)
    EXEQ            reduce using rule 27 (expr -> EX expr .)
    LT              reduce using rule 27 (expr -> EX expr .)
    GT              reduce using rule 27 (expr -> EX expr .)
    $end            reduce using rule 27 (expr -> EX expr .)
    RPAREN          reduce using rule 27 (expr -> EX expr .)
    COMMA           reduce using rule 27 (expr -> EX expr .)
    ELSE            reduce using rule 27 (expr -> EX expr .)
    RCURLY          reduce using rule 27 (expr -> EX expr .)
    LINE            reduce using rule 27 (expr -> EX expr .)

  ! MULTIPLY        [ shift and go to state 20 ]
  ! DIVIDE          [ shift and go to state 21 ]
  ! INTDIV          [ shift and go to state 22 ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! DBEQ            [ shift and go to state 25 ]
  ! EXEQ            [ shift and go to state 26 ]
  ! LT              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]


state 38

    (41) var_assign -> LET ID . EQ expr

    EQ              shift and go to state 65


state 39

    (42) func_assign -> FUNC ID . LPAREN multi_id RPAREN LCURLY multi_calc RCURLY

    LPAREN          shift and go to state 66


state 40

    (43) cout -> OUTPUT DBLT . expr
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 67

state 41

    (18) expr -> expr MULTIPLY expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    MULTIPLY        reduce using rule 18 (expr -> expr MULTIPLY expr .)
    DIVIDE          reduce using rule 18 (expr -> expr MULTIPLY expr .)
    INTDIV          reduce using rule 18 (expr -> expr MULTIPLY expr .)
    PLUS            reduce using rule 18 (expr -> expr MULTIPLY expr .)
    MINUS           reduce using rule 18 (expr -> expr MULTIPLY expr .)
    $end            reduce using rule 18 (expr -> expr MULTIPLY expr .)
    RPAREN          reduce using rule 18 (expr -> expr MULTIPLY expr .)
    COMMA           reduce using rule 18 (expr -> expr MULTIPLY expr .)
    ELSE            reduce using rule 18 (expr -> expr MULTIPLY expr .)
    RCURLY          reduce using rule 18 (expr -> expr MULTIPLY expr .)
    LINE            reduce using rule 18 (expr -> expr MULTIPLY expr .)
    DBEQ            shift and go to state 25
    EXEQ            shift and go to state 26
    LT              shift and go to state 27
    GT              shift and go to state 28

  ! DBEQ            [ reduce using rule 18 (expr -> expr MULTIPLY expr .) ]
  ! EXEQ            [ reduce using rule 18 (expr -> expr MULTIPLY expr .) ]
  ! LT              [ reduce using rule 18 (expr -> expr MULTIPLY expr .) ]
  ! GT              [ reduce using rule 18 (expr -> expr MULTIPLY expr .) ]
  ! MULTIPLY        [ shift and go to state 20 ]
  ! DIVIDE          [ shift and go to state 21 ]
  ! INTDIV          [ shift and go to state 22 ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]


state 42

    (19) expr -> expr DIVIDE expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    MULTIPLY        reduce using rule 19 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 19 (expr -> expr DIVIDE expr .)
    INTDIV          reduce using rule 19 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 19 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 19 (expr -> expr DIVIDE expr .)
    $end            reduce using rule 19 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 19 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 19 (expr -> expr DIVIDE expr .)
    ELSE            reduce using rule 19 (expr -> expr DIVIDE expr .)
    RCURLY          reduce using rule 19 (expr -> expr DIVIDE expr .)
    LINE            reduce using rule 19 (expr -> expr DIVIDE expr .)
    DBEQ            shift and go to state 25
    EXEQ            shift and go to state 26
    LT              shift and go to state 27
    GT              shift and go to state 28

  ! DBEQ            [ reduce using rule 19 (expr -> expr DIVIDE expr .) ]
  ! EXEQ            [ reduce using rule 19 (expr -> expr DIVIDE expr .) ]
  ! LT              [ reduce using rule 19 (expr -> expr DIVIDE expr .) ]
  ! GT              [ reduce using rule 19 (expr -> expr DIVIDE expr .) ]
  ! MULTIPLY        [ shift and go to state 20 ]
  ! DIVIDE          [ shift and go to state 21 ]
  ! INTDIV          [ shift and go to state 22 ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]


state 43

    (20) expr -> expr INTDIV expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    MULTIPLY        reduce using rule 20 (expr -> expr INTDIV expr .)
    DIVIDE          reduce using rule 20 (expr -> expr INTDIV expr .)
    INTDIV          reduce using rule 20 (expr -> expr INTDIV expr .)
    PLUS            reduce using rule 20 (expr -> expr INTDIV expr .)
    MINUS           reduce using rule 20 (expr -> expr INTDIV expr .)
    $end            reduce using rule 20 (expr -> expr INTDIV expr .)
    RPAREN          reduce using rule 20 (expr -> expr INTDIV expr .)
    COMMA           reduce using rule 20 (expr -> expr INTDIV expr .)
    ELSE            reduce using rule 20 (expr -> expr INTDIV expr .)
    RCURLY          reduce using rule 20 (expr -> expr INTDIV expr .)
    LINE            reduce using rule 20 (expr -> expr INTDIV expr .)
    DBEQ            shift and go to state 25
    EXEQ            shift and go to state 26
    LT              shift and go to state 27
    GT              shift and go to state 28

  ! DBEQ            [ reduce using rule 20 (expr -> expr INTDIV expr .) ]
  ! EXEQ            [ reduce using rule 20 (expr -> expr INTDIV expr .) ]
  ! LT              [ reduce using rule 20 (expr -> expr INTDIV expr .) ]
  ! GT              [ reduce using rule 20 (expr -> expr INTDIV expr .) ]
  ! MULTIPLY        [ shift and go to state 20 ]
  ! DIVIDE          [ shift and go to state 21 ]
  ! INTDIV          [ shift and go to state 22 ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]


state 44

    (21) expr -> expr PLUS expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    PLUS            reduce using rule 21 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 21 (expr -> expr PLUS expr .)
    $end            reduce using rule 21 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 21 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 21 (expr -> expr PLUS expr .)
    ELSE            reduce using rule 21 (expr -> expr PLUS expr .)
    RCURLY          reduce using rule 21 (expr -> expr PLUS expr .)
    LINE            reduce using rule 21 (expr -> expr PLUS expr .)
    MULTIPLY        shift and go to state 20
    DIVIDE          shift and go to state 21
    INTDIV          shift and go to state 22
    DBEQ            shift and go to state 25
    EXEQ            shift and go to state 26
    LT              shift and go to state 27
    GT              shift and go to state 28

  ! MULTIPLY        [ reduce using rule 21 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 21 (expr -> expr PLUS expr .) ]
  ! INTDIV          [ reduce using rule 21 (expr -> expr PLUS expr .) ]
  ! DBEQ            [ reduce using rule 21 (expr -> expr PLUS expr .) ]
  ! EXEQ            [ reduce using rule 21 (expr -> expr PLUS expr .) ]
  ! LT              [ reduce using rule 21 (expr -> expr PLUS expr .) ]
  ! GT              [ reduce using rule 21 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]


state 45

    (22) expr -> expr MINUS expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    PLUS            reduce using rule 22 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 22 (expr -> expr MINUS expr .)
    $end            reduce using rule 22 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 22 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 22 (expr -> expr MINUS expr .)
    ELSE            reduce using rule 22 (expr -> expr MINUS expr .)
    RCURLY          reduce using rule 22 (expr -> expr MINUS expr .)
    LINE            reduce using rule 22 (expr -> expr MINUS expr .)
    MULTIPLY        shift and go to state 20
    DIVIDE          shift and go to state 21
    INTDIV          shift and go to state 22
    DBEQ            shift and go to state 25
    EXEQ            shift and go to state 26
    LT              shift and go to state 27
    GT              shift and go to state 28

  ! MULTIPLY        [ reduce using rule 22 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 22 (expr -> expr MINUS expr .) ]
  ! INTDIV          [ reduce using rule 22 (expr -> expr MINUS expr .) ]
  ! DBEQ            [ reduce using rule 22 (expr -> expr MINUS expr .) ]
  ! EXEQ            [ reduce using rule 22 (expr -> expr MINUS expr .) ]
  ! LT              [ reduce using rule 22 (expr -> expr MINUS expr .) ]
  ! GT              [ reduce using rule 22 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]


state 46

    (23) expr -> expr DBEQ expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    MULTIPLY        reduce using rule 23 (expr -> expr DBEQ expr .)
    DIVIDE          reduce using rule 23 (expr -> expr DBEQ expr .)
    INTDIV          reduce using rule 23 (expr -> expr DBEQ expr .)
    PLUS            reduce using rule 23 (expr -> expr DBEQ expr .)
    MINUS           reduce using rule 23 (expr -> expr DBEQ expr .)
    DBEQ            reduce using rule 23 (expr -> expr DBEQ expr .)
    EXEQ            reduce using rule 23 (expr -> expr DBEQ expr .)
    LT              reduce using rule 23 (expr -> expr DBEQ expr .)
    GT              reduce using rule 23 (expr -> expr DBEQ expr .)
    $end            reduce using rule 23 (expr -> expr DBEQ expr .)
    RPAREN          reduce using rule 23 (expr -> expr DBEQ expr .)
    COMMA           reduce using rule 23 (expr -> expr DBEQ expr .)
    ELSE            reduce using rule 23 (expr -> expr DBEQ expr .)
    RCURLY          reduce using rule 23 (expr -> expr DBEQ expr .)
    LINE            reduce using rule 23 (expr -> expr DBEQ expr .)

  ! MULTIPLY        [ shift and go to state 20 ]
  ! DIVIDE          [ shift and go to state 21 ]
  ! INTDIV          [ shift and go to state 22 ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! DBEQ            [ shift and go to state 25 ]
  ! EXEQ            [ shift and go to state 26 ]
  ! LT              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]


state 47

    (24) expr -> expr EXEQ expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    MULTIPLY        reduce using rule 24 (expr -> expr EXEQ expr .)
    DIVIDE          reduce using rule 24 (expr -> expr EXEQ expr .)
    INTDIV          reduce using rule 24 (expr -> expr EXEQ expr .)
    PLUS            reduce using rule 24 (expr -> expr EXEQ expr .)
    MINUS           reduce using rule 24 (expr -> expr EXEQ expr .)
    DBEQ            reduce using rule 24 (expr -> expr EXEQ expr .)
    EXEQ            reduce using rule 24 (expr -> expr EXEQ expr .)
    LT              reduce using rule 24 (expr -> expr EXEQ expr .)
    GT              reduce using rule 24 (expr -> expr EXEQ expr .)
    $end            reduce using rule 24 (expr -> expr EXEQ expr .)
    RPAREN          reduce using rule 24 (expr -> expr EXEQ expr .)
    COMMA           reduce using rule 24 (expr -> expr EXEQ expr .)
    ELSE            reduce using rule 24 (expr -> expr EXEQ expr .)
    RCURLY          reduce using rule 24 (expr -> expr EXEQ expr .)
    LINE            reduce using rule 24 (expr -> expr EXEQ expr .)

  ! MULTIPLY        [ shift and go to state 20 ]
  ! DIVIDE          [ shift and go to state 21 ]
  ! INTDIV          [ shift and go to state 22 ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! DBEQ            [ shift and go to state 25 ]
  ! EXEQ            [ shift and go to state 26 ]
  ! LT              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]


state 48

    (25) expr -> expr LT expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    MULTIPLY        reduce using rule 25 (expr -> expr LT expr .)
    DIVIDE          reduce using rule 25 (expr -> expr LT expr .)
    INTDIV          reduce using rule 25 (expr -> expr LT expr .)
    PLUS            reduce using rule 25 (expr -> expr LT expr .)
    MINUS           reduce using rule 25 (expr -> expr LT expr .)
    DBEQ            reduce using rule 25 (expr -> expr LT expr .)
    EXEQ            reduce using rule 25 (expr -> expr LT expr .)
    LT              reduce using rule 25 (expr -> expr LT expr .)
    GT              reduce using rule 25 (expr -> expr LT expr .)
    $end            reduce using rule 25 (expr -> expr LT expr .)
    RPAREN          reduce using rule 25 (expr -> expr LT expr .)
    COMMA           reduce using rule 25 (expr -> expr LT expr .)
    ELSE            reduce using rule 25 (expr -> expr LT expr .)
    RCURLY          reduce using rule 25 (expr -> expr LT expr .)
    LINE            reduce using rule 25 (expr -> expr LT expr .)

  ! MULTIPLY        [ shift and go to state 20 ]
  ! DIVIDE          [ shift and go to state 21 ]
  ! INTDIV          [ shift and go to state 22 ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! DBEQ            [ shift and go to state 25 ]
  ! EXEQ            [ shift and go to state 26 ]
  ! LT              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]


state 49

    (26) expr -> expr GT expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    MULTIPLY        reduce using rule 26 (expr -> expr GT expr .)
    DIVIDE          reduce using rule 26 (expr -> expr GT expr .)
    INTDIV          reduce using rule 26 (expr -> expr GT expr .)
    PLUS            reduce using rule 26 (expr -> expr GT expr .)
    MINUS           reduce using rule 26 (expr -> expr GT expr .)
    DBEQ            reduce using rule 26 (expr -> expr GT expr .)
    EXEQ            reduce using rule 26 (expr -> expr GT expr .)
    LT              reduce using rule 26 (expr -> expr GT expr .)
    GT              reduce using rule 26 (expr -> expr GT expr .)
    $end            reduce using rule 26 (expr -> expr GT expr .)
    RPAREN          reduce using rule 26 (expr -> expr GT expr .)
    COMMA           reduce using rule 26 (expr -> expr GT expr .)
    ELSE            reduce using rule 26 (expr -> expr GT expr .)
    RCURLY          reduce using rule 26 (expr -> expr GT expr .)
    LINE            reduce using rule 26 (expr -> expr GT expr .)

  ! MULTIPLY        [ shift and go to state 20 ]
  ! DIVIDE          [ shift and go to state 21 ]
  ! INTDIV          [ shift and go to state 22 ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! DBEQ            [ shift and go to state 25 ]
  ! EXEQ            [ shift and go to state 26 ]
  ! LT              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]


state 50

    (39) calc -> IF LPAREN expr . RPAREN LCURLY multi_calc ELSE multi_calc RCURLY
    (40) calc -> IF LPAREN expr . RPAREN LCURLY multi_calc RCURLY
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    RPAREN          shift and go to state 68
    MULTIPLY        shift and go to state 20
    DIVIDE          shift and go to state 21
    INTDIV          shift and go to state 22
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    DBEQ            shift and go to state 25
    EXEQ            shift and go to state 26
    LT              shift and go to state 27
    GT              shift and go to state 28


state 51

    (6) expr -> LPAREN expr PLUS . expr RPAREN
    (21) expr -> expr PLUS . expr
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 69

state 52

    (7) expr -> LPAREN expr MINUS . expr RPAREN
    (22) expr -> expr MINUS . expr
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 70

state 53

    (8) expr -> LPAREN expr MULTIPLY . expr RPAREN
    (18) expr -> expr MULTIPLY . expr
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 71

state 54

    (9) expr -> LPAREN expr DIVIDE . expr RPAREN
    (19) expr -> expr DIVIDE . expr
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 72

state 55

    (10) expr -> LPAREN expr INTDIV . expr RPAREN
    (20) expr -> expr INTDIV . expr
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 73

state 56

    (11) expr -> LPAREN expr DBEQ . expr RPAREN
    (23) expr -> expr DBEQ . expr
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 74

state 57

    (12) expr -> LPAREN expr EXEQ . expr RPAREN
    (24) expr -> expr EXEQ . expr
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 75

state 58

    (13) expr -> LPAREN expr LT . expr RPAREN
    (25) expr -> expr LT . expr
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 76

state 59

    (14) expr -> LPAREN expr GT . expr RPAREN
    (26) expr -> expr GT . expr
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 77

state 60

    (15) expr -> LPAREN EX expr . RPAREN
    (27) expr -> EX expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    RPAREN          shift and go to state 78
    PLUS            reduce using rule 27 (expr -> EX expr .)
    MINUS           reduce using rule 27 (expr -> EX expr .)
    MULTIPLY        reduce using rule 27 (expr -> EX expr .)
    DIVIDE          reduce using rule 27 (expr -> EX expr .)
    INTDIV          reduce using rule 27 (expr -> EX expr .)
    DBEQ            reduce using rule 27 (expr -> EX expr .)
    EXEQ            reduce using rule 27 (expr -> EX expr .)
    LT              reduce using rule 27 (expr -> EX expr .)
    GT              reduce using rule 27 (expr -> EX expr .)

  ! MULTIPLY        [ shift and go to state 20 ]
  ! DIVIDE          [ shift and go to state 21 ]
  ! INTDIV          [ shift and go to state 22 ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! DBEQ            [ shift and go to state 25 ]
  ! EXEQ            [ shift and go to state 26 ]
  ! LT              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]


state 61

    (46) calc -> ID LPAREN multi_expr . RPAREN
    (32) multi_expr -> multi_expr . COMMA expr

    RPAREN          shift and go to state 79
    COMMA           shift and go to state 80


state 62

    (33) multi_expr -> expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    RPAREN          reduce using rule 33 (multi_expr -> expr .)
    COMMA           reduce using rule 33 (multi_expr -> expr .)
    MULTIPLY        shift and go to state 20
    DIVIDE          shift and go to state 21
    INTDIV          shift and go to state 22
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    DBEQ            shift and go to state 25
    EXEQ            shift and go to state 26
    LT              shift and go to state 27
    GT              shift and go to state 28


state 63

    (34) multi_expr -> empty .

    RPAREN          reduce using rule 34 (multi_expr -> empty .)
    COMMA           reduce using rule 34 (multi_expr -> empty .)


state 64

    (45) var_assign -> ID DBLT INPUT .

    $end            reduce using rule 45 (var_assign -> ID DBLT INPUT .)
    ELSE            reduce using rule 45 (var_assign -> ID DBLT INPUT .)
    RCURLY          reduce using rule 45 (var_assign -> ID DBLT INPUT .)
    LINE            reduce using rule 45 (var_assign -> ID DBLT INPUT .)


state 65

    (41) var_assign -> LET ID EQ . expr
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 81

state 66

    (42) func_assign -> FUNC ID LPAREN . multi_id RPAREN LCURLY multi_calc RCURLY
    (36) multi_id -> . multi_id COMMA ID
    (37) multi_id -> . ID
    (38) multi_id -> . empty
    (48) empty -> .

    ID              shift and go to state 82
    RPAREN          reduce using rule 48 (empty -> .)
    COMMA           reduce using rule 48 (empty -> .)

    multi_id                       shift and go to state 83
    empty                          shift and go to state 84

state 67

    (43) cout -> OUTPUT DBLT expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    $end            reduce using rule 43 (cout -> OUTPUT DBLT expr .)
    ELSE            reduce using rule 43 (cout -> OUTPUT DBLT expr .)
    RCURLY          reduce using rule 43 (cout -> OUTPUT DBLT expr .)
    LINE            reduce using rule 43 (cout -> OUTPUT DBLT expr .)
    MULTIPLY        shift and go to state 20
    DIVIDE          shift and go to state 21
    INTDIV          shift and go to state 22
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    DBEQ            shift and go to state 25
    EXEQ            shift and go to state 26
    LT              shift and go to state 27
    GT              shift and go to state 28


state 68

    (39) calc -> IF LPAREN expr RPAREN . LCURLY multi_calc ELSE multi_calc RCURLY
    (40) calc -> IF LPAREN expr RPAREN . LCURLY multi_calc RCURLY

    LCURLY          shift and go to state 85


state 69

    (6) expr -> LPAREN expr PLUS expr . RPAREN
    (21) expr -> expr PLUS expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    RPAREN          shift and go to state 86
    PLUS            reduce using rule 21 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 21 (expr -> expr PLUS expr .)
    MULTIPLY        shift and go to state 20
    DIVIDE          shift and go to state 21
    INTDIV          shift and go to state 22
    DBEQ            shift and go to state 25
    EXEQ            shift and go to state 26
    LT              shift and go to state 27
    GT              shift and go to state 28

  ! MULTIPLY        [ reduce using rule 21 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 21 (expr -> expr PLUS expr .) ]
  ! INTDIV          [ reduce using rule 21 (expr -> expr PLUS expr .) ]
  ! DBEQ            [ reduce using rule 21 (expr -> expr PLUS expr .) ]
  ! EXEQ            [ reduce using rule 21 (expr -> expr PLUS expr .) ]
  ! LT              [ reduce using rule 21 (expr -> expr PLUS expr .) ]
  ! GT              [ reduce using rule 21 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]


state 70

    (7) expr -> LPAREN expr MINUS expr . RPAREN
    (22) expr -> expr MINUS expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    RPAREN          shift and go to state 87
    PLUS            reduce using rule 22 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 22 (expr -> expr MINUS expr .)
    MULTIPLY        shift and go to state 20
    DIVIDE          shift and go to state 21
    INTDIV          shift and go to state 22
    DBEQ            shift and go to state 25
    EXEQ            shift and go to state 26
    LT              shift and go to state 27
    GT              shift and go to state 28

  ! MULTIPLY        [ reduce using rule 22 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 22 (expr -> expr MINUS expr .) ]
  ! INTDIV          [ reduce using rule 22 (expr -> expr MINUS expr .) ]
  ! DBEQ            [ reduce using rule 22 (expr -> expr MINUS expr .) ]
  ! EXEQ            [ reduce using rule 22 (expr -> expr MINUS expr .) ]
  ! LT              [ reduce using rule 22 (expr -> expr MINUS expr .) ]
  ! GT              [ reduce using rule 22 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]


state 71

    (8) expr -> LPAREN expr MULTIPLY expr . RPAREN
    (18) expr -> expr MULTIPLY expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    RPAREN          shift and go to state 88
    PLUS            reduce using rule 18 (expr -> expr MULTIPLY expr .)
    MINUS           reduce using rule 18 (expr -> expr MULTIPLY expr .)
    MULTIPLY        reduce using rule 18 (expr -> expr MULTIPLY expr .)
    DIVIDE          reduce using rule 18 (expr -> expr MULTIPLY expr .)
    INTDIV          reduce using rule 18 (expr -> expr MULTIPLY expr .)
    DBEQ            shift and go to state 25
    EXEQ            shift and go to state 26
    LT              shift and go to state 27
    GT              shift and go to state 28

  ! DBEQ            [ reduce using rule 18 (expr -> expr MULTIPLY expr .) ]
  ! EXEQ            [ reduce using rule 18 (expr -> expr MULTIPLY expr .) ]
  ! LT              [ reduce using rule 18 (expr -> expr MULTIPLY expr .) ]
  ! GT              [ reduce using rule 18 (expr -> expr MULTIPLY expr .) ]
  ! MULTIPLY        [ shift and go to state 20 ]
  ! DIVIDE          [ shift and go to state 21 ]
  ! INTDIV          [ shift and go to state 22 ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]


state 72

    (9) expr -> LPAREN expr DIVIDE expr . RPAREN
    (19) expr -> expr DIVIDE expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    RPAREN          shift and go to state 89
    PLUS            reduce using rule 19 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 19 (expr -> expr DIVIDE expr .)
    MULTIPLY        reduce using rule 19 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 19 (expr -> expr DIVIDE expr .)
    INTDIV          reduce using rule 19 (expr -> expr DIVIDE expr .)
    DBEQ            shift and go to state 25
    EXEQ            shift and go to state 26
    LT              shift and go to state 27
    GT              shift and go to state 28

  ! DBEQ            [ reduce using rule 19 (expr -> expr DIVIDE expr .) ]
  ! EXEQ            [ reduce using rule 19 (expr -> expr DIVIDE expr .) ]
  ! LT              [ reduce using rule 19 (expr -> expr DIVIDE expr .) ]
  ! GT              [ reduce using rule 19 (expr -> expr DIVIDE expr .) ]
  ! MULTIPLY        [ shift and go to state 20 ]
  ! DIVIDE          [ shift and go to state 21 ]
  ! INTDIV          [ shift and go to state 22 ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]


state 73

    (10) expr -> LPAREN expr INTDIV expr . RPAREN
    (20) expr -> expr INTDIV expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    RPAREN          shift and go to state 90
    PLUS            reduce using rule 20 (expr -> expr INTDIV expr .)
    MINUS           reduce using rule 20 (expr -> expr INTDIV expr .)
    MULTIPLY        reduce using rule 20 (expr -> expr INTDIV expr .)
    DIVIDE          reduce using rule 20 (expr -> expr INTDIV expr .)
    INTDIV          reduce using rule 20 (expr -> expr INTDIV expr .)
    DBEQ            shift and go to state 25
    EXEQ            shift and go to state 26
    LT              shift and go to state 27
    GT              shift and go to state 28

  ! DBEQ            [ reduce using rule 20 (expr -> expr INTDIV expr .) ]
  ! EXEQ            [ reduce using rule 20 (expr -> expr INTDIV expr .) ]
  ! LT              [ reduce using rule 20 (expr -> expr INTDIV expr .) ]
  ! GT              [ reduce using rule 20 (expr -> expr INTDIV expr .) ]
  ! MULTIPLY        [ shift and go to state 20 ]
  ! DIVIDE          [ shift and go to state 21 ]
  ! INTDIV          [ shift and go to state 22 ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]


state 74

    (11) expr -> LPAREN expr DBEQ expr . RPAREN
    (23) expr -> expr DBEQ expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    RPAREN          shift and go to state 91
    PLUS            reduce using rule 23 (expr -> expr DBEQ expr .)
    MINUS           reduce using rule 23 (expr -> expr DBEQ expr .)
    MULTIPLY        reduce using rule 23 (expr -> expr DBEQ expr .)
    DIVIDE          reduce using rule 23 (expr -> expr DBEQ expr .)
    INTDIV          reduce using rule 23 (expr -> expr DBEQ expr .)
    DBEQ            reduce using rule 23 (expr -> expr DBEQ expr .)
    EXEQ            reduce using rule 23 (expr -> expr DBEQ expr .)
    LT              reduce using rule 23 (expr -> expr DBEQ expr .)
    GT              reduce using rule 23 (expr -> expr DBEQ expr .)

  ! MULTIPLY        [ shift and go to state 20 ]
  ! DIVIDE          [ shift and go to state 21 ]
  ! INTDIV          [ shift and go to state 22 ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! DBEQ            [ shift and go to state 25 ]
  ! EXEQ            [ shift and go to state 26 ]
  ! LT              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]


state 75

    (12) expr -> LPAREN expr EXEQ expr . RPAREN
    (24) expr -> expr EXEQ expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    RPAREN          shift and go to state 92
    PLUS            reduce using rule 24 (expr -> expr EXEQ expr .)
    MINUS           reduce using rule 24 (expr -> expr EXEQ expr .)
    MULTIPLY        reduce using rule 24 (expr -> expr EXEQ expr .)
    DIVIDE          reduce using rule 24 (expr -> expr EXEQ expr .)
    INTDIV          reduce using rule 24 (expr -> expr EXEQ expr .)
    DBEQ            reduce using rule 24 (expr -> expr EXEQ expr .)
    EXEQ            reduce using rule 24 (expr -> expr EXEQ expr .)
    LT              reduce using rule 24 (expr -> expr EXEQ expr .)
    GT              reduce using rule 24 (expr -> expr EXEQ expr .)

  ! MULTIPLY        [ shift and go to state 20 ]
  ! DIVIDE          [ shift and go to state 21 ]
  ! INTDIV          [ shift and go to state 22 ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! DBEQ            [ shift and go to state 25 ]
  ! EXEQ            [ shift and go to state 26 ]
  ! LT              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]


state 76

    (13) expr -> LPAREN expr LT expr . RPAREN
    (25) expr -> expr LT expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    RPAREN          shift and go to state 93
    PLUS            reduce using rule 25 (expr -> expr LT expr .)
    MINUS           reduce using rule 25 (expr -> expr LT expr .)
    MULTIPLY        reduce using rule 25 (expr -> expr LT expr .)
    DIVIDE          reduce using rule 25 (expr -> expr LT expr .)
    INTDIV          reduce using rule 25 (expr -> expr LT expr .)
    DBEQ            reduce using rule 25 (expr -> expr LT expr .)
    EXEQ            reduce using rule 25 (expr -> expr LT expr .)
    LT              reduce using rule 25 (expr -> expr LT expr .)
    GT              reduce using rule 25 (expr -> expr LT expr .)

  ! MULTIPLY        [ shift and go to state 20 ]
  ! DIVIDE          [ shift and go to state 21 ]
  ! INTDIV          [ shift and go to state 22 ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! DBEQ            [ shift and go to state 25 ]
  ! EXEQ            [ shift and go to state 26 ]
  ! LT              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]


state 77

    (14) expr -> LPAREN expr GT expr . RPAREN
    (26) expr -> expr GT expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    RPAREN          shift and go to state 94
    PLUS            reduce using rule 26 (expr -> expr GT expr .)
    MINUS           reduce using rule 26 (expr -> expr GT expr .)
    MULTIPLY        reduce using rule 26 (expr -> expr GT expr .)
    DIVIDE          reduce using rule 26 (expr -> expr GT expr .)
    INTDIV          reduce using rule 26 (expr -> expr GT expr .)
    DBEQ            reduce using rule 26 (expr -> expr GT expr .)
    EXEQ            reduce using rule 26 (expr -> expr GT expr .)
    LT              reduce using rule 26 (expr -> expr GT expr .)
    GT              reduce using rule 26 (expr -> expr GT expr .)

  ! MULTIPLY        [ shift and go to state 20 ]
  ! DIVIDE          [ shift and go to state 21 ]
  ! INTDIV          [ shift and go to state 22 ]
  ! PLUS            [ shift and go to state 23 ]
  ! MINUS           [ shift and go to state 24 ]
  ! DBEQ            [ shift and go to state 25 ]
  ! EXEQ            [ shift and go to state 26 ]
  ! LT              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]


state 78

    (15) expr -> LPAREN EX expr RPAREN .

    MULTIPLY        reduce using rule 15 (expr -> LPAREN EX expr RPAREN .)
    DIVIDE          reduce using rule 15 (expr -> LPAREN EX expr RPAREN .)
    INTDIV          reduce using rule 15 (expr -> LPAREN EX expr RPAREN .)
    PLUS            reduce using rule 15 (expr -> LPAREN EX expr RPAREN .)
    MINUS           reduce using rule 15 (expr -> LPAREN EX expr RPAREN .)
    DBEQ            reduce using rule 15 (expr -> LPAREN EX expr RPAREN .)
    EXEQ            reduce using rule 15 (expr -> LPAREN EX expr RPAREN .)
    LT              reduce using rule 15 (expr -> LPAREN EX expr RPAREN .)
    GT              reduce using rule 15 (expr -> LPAREN EX expr RPAREN .)
    $end            reduce using rule 15 (expr -> LPAREN EX expr RPAREN .)
    RPAREN          reduce using rule 15 (expr -> LPAREN EX expr RPAREN .)
    COMMA           reduce using rule 15 (expr -> LPAREN EX expr RPAREN .)
    ELSE            reduce using rule 15 (expr -> LPAREN EX expr RPAREN .)
    RCURLY          reduce using rule 15 (expr -> LPAREN EX expr RPAREN .)
    LINE            reduce using rule 15 (expr -> LPAREN EX expr RPAREN .)


state 79

    (46) calc -> ID LPAREN multi_expr RPAREN .

    $end            reduce using rule 46 (calc -> ID LPAREN multi_expr RPAREN .)
    ELSE            reduce using rule 46 (calc -> ID LPAREN multi_expr RPAREN .)
    RCURLY          reduce using rule 46 (calc -> ID LPAREN multi_expr RPAREN .)
    LINE            reduce using rule 46 (calc -> ID LPAREN multi_expr RPAREN .)


state 80

    (32) multi_expr -> multi_expr COMMA . expr
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID

    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    ID              shift and go to state 32

    expr                           shift and go to state 95

state 81

    (41) var_assign -> LET ID EQ expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    $end            reduce using rule 41 (var_assign -> LET ID EQ expr .)
    ELSE            reduce using rule 41 (var_assign -> LET ID EQ expr .)
    RCURLY          reduce using rule 41 (var_assign -> LET ID EQ expr .)
    LINE            reduce using rule 41 (var_assign -> LET ID EQ expr .)
    MULTIPLY        shift and go to state 20
    DIVIDE          shift and go to state 21
    INTDIV          shift and go to state 22
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    DBEQ            shift and go to state 25
    EXEQ            shift and go to state 26
    LT              shift and go to state 27
    GT              shift and go to state 28


state 82

    (37) multi_id -> ID .

    RPAREN          reduce using rule 37 (multi_id -> ID .)
    COMMA           reduce using rule 37 (multi_id -> ID .)


state 83

    (42) func_assign -> FUNC ID LPAREN multi_id . RPAREN LCURLY multi_calc RCURLY
    (36) multi_id -> multi_id . COMMA ID

    RPAREN          shift and go to state 96
    COMMA           shift and go to state 97


state 84

    (38) multi_id -> empty .

    RPAREN          reduce using rule 38 (multi_id -> empty .)
    COMMA           reduce using rule 38 (multi_id -> empty .)


state 85

    (39) calc -> IF LPAREN expr RPAREN LCURLY . multi_calc ELSE multi_calc RCURLY
    (40) calc -> IF LPAREN expr RPAREN LCURLY . multi_calc RCURLY
    (16) multi_calc -> . multi_calc LINE calc
    (17) multi_calc -> . calc
    (1) calc -> . expr
    (2) calc -> . var_assign
    (3) calc -> . func_assign
    (4) calc -> . cout
    (5) calc -> . empty
    (39) calc -> . IF LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY
    (40) calc -> . IF LPAREN expr RPAREN LCURLY multi_calc RCURLY
    (46) calc -> . ID LPAREN multi_expr RPAREN
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID
    (41) var_assign -> . LET ID EQ expr
    (45) var_assign -> . ID DBLT INPUT
    (42) func_assign -> . FUNC ID LPAREN multi_id RPAREN LCURLY multi_calc RCURLY
    (43) cout -> . OUTPUT DBLT expr
    (48) empty -> .

    IF              shift and go to state 7
    ID              shift and go to state 9
    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    LET             shift and go to state 17
    FUNC            shift and go to state 18
    OUTPUT          shift and go to state 19
    ELSE            reduce using rule 48 (empty -> .)
    RCURLY          reduce using rule 48 (empty -> .)
    LINE            reduce using rule 48 (empty -> .)

    expr                           shift and go to state 2
    multi_calc                     shift and go to state 98
    calc                           shift and go to state 99
    var_assign                     shift and go to state 3
    func_assign                    shift and go to state 4
    cout                           shift and go to state 5
    empty                          shift and go to state 6

state 86

    (6) expr -> LPAREN expr PLUS expr RPAREN .

    MULTIPLY        reduce using rule 6 (expr -> LPAREN expr PLUS expr RPAREN .)
    DIVIDE          reduce using rule 6 (expr -> LPAREN expr PLUS expr RPAREN .)
    INTDIV          reduce using rule 6 (expr -> LPAREN expr PLUS expr RPAREN .)
    PLUS            reduce using rule 6 (expr -> LPAREN expr PLUS expr RPAREN .)
    MINUS           reduce using rule 6 (expr -> LPAREN expr PLUS expr RPAREN .)
    DBEQ            reduce using rule 6 (expr -> LPAREN expr PLUS expr RPAREN .)
    EXEQ            reduce using rule 6 (expr -> LPAREN expr PLUS expr RPAREN .)
    LT              reduce using rule 6 (expr -> LPAREN expr PLUS expr RPAREN .)
    GT              reduce using rule 6 (expr -> LPAREN expr PLUS expr RPAREN .)
    $end            reduce using rule 6 (expr -> LPAREN expr PLUS expr RPAREN .)
    RPAREN          reduce using rule 6 (expr -> LPAREN expr PLUS expr RPAREN .)
    COMMA           reduce using rule 6 (expr -> LPAREN expr PLUS expr RPAREN .)
    ELSE            reduce using rule 6 (expr -> LPAREN expr PLUS expr RPAREN .)
    RCURLY          reduce using rule 6 (expr -> LPAREN expr PLUS expr RPAREN .)
    LINE            reduce using rule 6 (expr -> LPAREN expr PLUS expr RPAREN .)


state 87

    (7) expr -> LPAREN expr MINUS expr RPAREN .

    MULTIPLY        reduce using rule 7 (expr -> LPAREN expr MINUS expr RPAREN .)
    DIVIDE          reduce using rule 7 (expr -> LPAREN expr MINUS expr RPAREN .)
    INTDIV          reduce using rule 7 (expr -> LPAREN expr MINUS expr RPAREN .)
    PLUS            reduce using rule 7 (expr -> LPAREN expr MINUS expr RPAREN .)
    MINUS           reduce using rule 7 (expr -> LPAREN expr MINUS expr RPAREN .)
    DBEQ            reduce using rule 7 (expr -> LPAREN expr MINUS expr RPAREN .)
    EXEQ            reduce using rule 7 (expr -> LPAREN expr MINUS expr RPAREN .)
    LT              reduce using rule 7 (expr -> LPAREN expr MINUS expr RPAREN .)
    GT              reduce using rule 7 (expr -> LPAREN expr MINUS expr RPAREN .)
    $end            reduce using rule 7 (expr -> LPAREN expr MINUS expr RPAREN .)
    RPAREN          reduce using rule 7 (expr -> LPAREN expr MINUS expr RPAREN .)
    COMMA           reduce using rule 7 (expr -> LPAREN expr MINUS expr RPAREN .)
    ELSE            reduce using rule 7 (expr -> LPAREN expr MINUS expr RPAREN .)
    RCURLY          reduce using rule 7 (expr -> LPAREN expr MINUS expr RPAREN .)
    LINE            reduce using rule 7 (expr -> LPAREN expr MINUS expr RPAREN .)


state 88

    (8) expr -> LPAREN expr MULTIPLY expr RPAREN .

    MULTIPLY        reduce using rule 8 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    DIVIDE          reduce using rule 8 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    INTDIV          reduce using rule 8 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    PLUS            reduce using rule 8 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    MINUS           reduce using rule 8 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    DBEQ            reduce using rule 8 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    EXEQ            reduce using rule 8 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    LT              reduce using rule 8 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    GT              reduce using rule 8 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    $end            reduce using rule 8 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    RPAREN          reduce using rule 8 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    COMMA           reduce using rule 8 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    ELSE            reduce using rule 8 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    RCURLY          reduce using rule 8 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    LINE            reduce using rule 8 (expr -> LPAREN expr MULTIPLY expr RPAREN .)


state 89

    (9) expr -> LPAREN expr DIVIDE expr RPAREN .

    MULTIPLY        reduce using rule 9 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    DIVIDE          reduce using rule 9 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    INTDIV          reduce using rule 9 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    PLUS            reduce using rule 9 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    MINUS           reduce using rule 9 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    DBEQ            reduce using rule 9 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    EXEQ            reduce using rule 9 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    LT              reduce using rule 9 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    GT              reduce using rule 9 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    $end            reduce using rule 9 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    RPAREN          reduce using rule 9 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    COMMA           reduce using rule 9 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    ELSE            reduce using rule 9 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    RCURLY          reduce using rule 9 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    LINE            reduce using rule 9 (expr -> LPAREN expr DIVIDE expr RPAREN .)


state 90

    (10) expr -> LPAREN expr INTDIV expr RPAREN .

    MULTIPLY        reduce using rule 10 (expr -> LPAREN expr INTDIV expr RPAREN .)
    DIVIDE          reduce using rule 10 (expr -> LPAREN expr INTDIV expr RPAREN .)
    INTDIV          reduce using rule 10 (expr -> LPAREN expr INTDIV expr RPAREN .)
    PLUS            reduce using rule 10 (expr -> LPAREN expr INTDIV expr RPAREN .)
    MINUS           reduce using rule 10 (expr -> LPAREN expr INTDIV expr RPAREN .)
    DBEQ            reduce using rule 10 (expr -> LPAREN expr INTDIV expr RPAREN .)
    EXEQ            reduce using rule 10 (expr -> LPAREN expr INTDIV expr RPAREN .)
    LT              reduce using rule 10 (expr -> LPAREN expr INTDIV expr RPAREN .)
    GT              reduce using rule 10 (expr -> LPAREN expr INTDIV expr RPAREN .)
    $end            reduce using rule 10 (expr -> LPAREN expr INTDIV expr RPAREN .)
    RPAREN          reduce using rule 10 (expr -> LPAREN expr INTDIV expr RPAREN .)
    COMMA           reduce using rule 10 (expr -> LPAREN expr INTDIV expr RPAREN .)
    ELSE            reduce using rule 10 (expr -> LPAREN expr INTDIV expr RPAREN .)
    RCURLY          reduce using rule 10 (expr -> LPAREN expr INTDIV expr RPAREN .)
    LINE            reduce using rule 10 (expr -> LPAREN expr INTDIV expr RPAREN .)


state 91

    (11) expr -> LPAREN expr DBEQ expr RPAREN .

    MULTIPLY        reduce using rule 11 (expr -> LPAREN expr DBEQ expr RPAREN .)
    DIVIDE          reduce using rule 11 (expr -> LPAREN expr DBEQ expr RPAREN .)
    INTDIV          reduce using rule 11 (expr -> LPAREN expr DBEQ expr RPAREN .)
    PLUS            reduce using rule 11 (expr -> LPAREN expr DBEQ expr RPAREN .)
    MINUS           reduce using rule 11 (expr -> LPAREN expr DBEQ expr RPAREN .)
    DBEQ            reduce using rule 11 (expr -> LPAREN expr DBEQ expr RPAREN .)
    EXEQ            reduce using rule 11 (expr -> LPAREN expr DBEQ expr RPAREN .)
    LT              reduce using rule 11 (expr -> LPAREN expr DBEQ expr RPAREN .)
    GT              reduce using rule 11 (expr -> LPAREN expr DBEQ expr RPAREN .)
    $end            reduce using rule 11 (expr -> LPAREN expr DBEQ expr RPAREN .)
    RPAREN          reduce using rule 11 (expr -> LPAREN expr DBEQ expr RPAREN .)
    COMMA           reduce using rule 11 (expr -> LPAREN expr DBEQ expr RPAREN .)
    ELSE            reduce using rule 11 (expr -> LPAREN expr DBEQ expr RPAREN .)
    RCURLY          reduce using rule 11 (expr -> LPAREN expr DBEQ expr RPAREN .)
    LINE            reduce using rule 11 (expr -> LPAREN expr DBEQ expr RPAREN .)


state 92

    (12) expr -> LPAREN expr EXEQ expr RPAREN .

    MULTIPLY        reduce using rule 12 (expr -> LPAREN expr EXEQ expr RPAREN .)
    DIVIDE          reduce using rule 12 (expr -> LPAREN expr EXEQ expr RPAREN .)
    INTDIV          reduce using rule 12 (expr -> LPAREN expr EXEQ expr RPAREN .)
    PLUS            reduce using rule 12 (expr -> LPAREN expr EXEQ expr RPAREN .)
    MINUS           reduce using rule 12 (expr -> LPAREN expr EXEQ expr RPAREN .)
    DBEQ            reduce using rule 12 (expr -> LPAREN expr EXEQ expr RPAREN .)
    EXEQ            reduce using rule 12 (expr -> LPAREN expr EXEQ expr RPAREN .)
    LT              reduce using rule 12 (expr -> LPAREN expr EXEQ expr RPAREN .)
    GT              reduce using rule 12 (expr -> LPAREN expr EXEQ expr RPAREN .)
    $end            reduce using rule 12 (expr -> LPAREN expr EXEQ expr RPAREN .)
    RPAREN          reduce using rule 12 (expr -> LPAREN expr EXEQ expr RPAREN .)
    COMMA           reduce using rule 12 (expr -> LPAREN expr EXEQ expr RPAREN .)
    ELSE            reduce using rule 12 (expr -> LPAREN expr EXEQ expr RPAREN .)
    RCURLY          reduce using rule 12 (expr -> LPAREN expr EXEQ expr RPAREN .)
    LINE            reduce using rule 12 (expr -> LPAREN expr EXEQ expr RPAREN .)


state 93

    (13) expr -> LPAREN expr LT expr RPAREN .

    MULTIPLY        reduce using rule 13 (expr -> LPAREN expr LT expr RPAREN .)
    DIVIDE          reduce using rule 13 (expr -> LPAREN expr LT expr RPAREN .)
    INTDIV          reduce using rule 13 (expr -> LPAREN expr LT expr RPAREN .)
    PLUS            reduce using rule 13 (expr -> LPAREN expr LT expr RPAREN .)
    MINUS           reduce using rule 13 (expr -> LPAREN expr LT expr RPAREN .)
    DBEQ            reduce using rule 13 (expr -> LPAREN expr LT expr RPAREN .)
    EXEQ            reduce using rule 13 (expr -> LPAREN expr LT expr RPAREN .)
    LT              reduce using rule 13 (expr -> LPAREN expr LT expr RPAREN .)
    GT              reduce using rule 13 (expr -> LPAREN expr LT expr RPAREN .)
    $end            reduce using rule 13 (expr -> LPAREN expr LT expr RPAREN .)
    RPAREN          reduce using rule 13 (expr -> LPAREN expr LT expr RPAREN .)
    COMMA           reduce using rule 13 (expr -> LPAREN expr LT expr RPAREN .)
    ELSE            reduce using rule 13 (expr -> LPAREN expr LT expr RPAREN .)
    RCURLY          reduce using rule 13 (expr -> LPAREN expr LT expr RPAREN .)
    LINE            reduce using rule 13 (expr -> LPAREN expr LT expr RPAREN .)


state 94

    (14) expr -> LPAREN expr GT expr RPAREN .

    MULTIPLY        reduce using rule 14 (expr -> LPAREN expr GT expr RPAREN .)
    DIVIDE          reduce using rule 14 (expr -> LPAREN expr GT expr RPAREN .)
    INTDIV          reduce using rule 14 (expr -> LPAREN expr GT expr RPAREN .)
    PLUS            reduce using rule 14 (expr -> LPAREN expr GT expr RPAREN .)
    MINUS           reduce using rule 14 (expr -> LPAREN expr GT expr RPAREN .)
    DBEQ            reduce using rule 14 (expr -> LPAREN expr GT expr RPAREN .)
    EXEQ            reduce using rule 14 (expr -> LPAREN expr GT expr RPAREN .)
    LT              reduce using rule 14 (expr -> LPAREN expr GT expr RPAREN .)
    GT              reduce using rule 14 (expr -> LPAREN expr GT expr RPAREN .)
    $end            reduce using rule 14 (expr -> LPAREN expr GT expr RPAREN .)
    RPAREN          reduce using rule 14 (expr -> LPAREN expr GT expr RPAREN .)
    COMMA           reduce using rule 14 (expr -> LPAREN expr GT expr RPAREN .)
    ELSE            reduce using rule 14 (expr -> LPAREN expr GT expr RPAREN .)
    RCURLY          reduce using rule 14 (expr -> LPAREN expr GT expr RPAREN .)
    LINE            reduce using rule 14 (expr -> LPAREN expr GT expr RPAREN .)


state 95

    (32) multi_expr -> multi_expr COMMA expr .
    (18) expr -> expr . MULTIPLY expr
    (19) expr -> expr . DIVIDE expr
    (20) expr -> expr . INTDIV expr
    (21) expr -> expr . PLUS expr
    (22) expr -> expr . MINUS expr
    (23) expr -> expr . DBEQ expr
    (24) expr -> expr . EXEQ expr
    (25) expr -> expr . LT expr
    (26) expr -> expr . GT expr

    RPAREN          reduce using rule 32 (multi_expr -> multi_expr COMMA expr .)
    COMMA           reduce using rule 32 (multi_expr -> multi_expr COMMA expr .)
    MULTIPLY        shift and go to state 20
    DIVIDE          shift and go to state 21
    INTDIV          shift and go to state 22
    PLUS            shift and go to state 23
    MINUS           shift and go to state 24
    DBEQ            shift and go to state 25
    EXEQ            shift and go to state 26
    LT              shift and go to state 27
    GT              shift and go to state 28


state 96

    (42) func_assign -> FUNC ID LPAREN multi_id RPAREN . LCURLY multi_calc RCURLY

    LCURLY          shift and go to state 100


state 97

    (36) multi_id -> multi_id COMMA . ID

    ID              shift and go to state 101


state 98

    (39) calc -> IF LPAREN expr RPAREN LCURLY multi_calc . ELSE multi_calc RCURLY
    (40) calc -> IF LPAREN expr RPAREN LCURLY multi_calc . RCURLY
    (16) multi_calc -> multi_calc . LINE calc

    ELSE            shift and go to state 102
    RCURLY          shift and go to state 103
    LINE            shift and go to state 104


state 99

    (17) multi_calc -> calc .

    ELSE            reduce using rule 17 (multi_calc -> calc .)
    RCURLY          reduce using rule 17 (multi_calc -> calc .)
    LINE            reduce using rule 17 (multi_calc -> calc .)


state 100

    (42) func_assign -> FUNC ID LPAREN multi_id RPAREN LCURLY . multi_calc RCURLY
    (16) multi_calc -> . multi_calc LINE calc
    (17) multi_calc -> . calc
    (1) calc -> . expr
    (2) calc -> . var_assign
    (3) calc -> . func_assign
    (4) calc -> . cout
    (5) calc -> . empty
    (39) calc -> . IF LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY
    (40) calc -> . IF LPAREN expr RPAREN LCURLY multi_calc RCURLY
    (46) calc -> . ID LPAREN multi_expr RPAREN
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID
    (41) var_assign -> . LET ID EQ expr
    (45) var_assign -> . ID DBLT INPUT
    (42) func_assign -> . FUNC ID LPAREN multi_id RPAREN LCURLY multi_calc RCURLY
    (43) cout -> . OUTPUT DBLT expr
    (48) empty -> .

    IF              shift and go to state 7
    ID              shift and go to state 9
    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    LET             shift and go to state 17
    FUNC            shift and go to state 18
    OUTPUT          shift and go to state 19
    RCURLY          reduce using rule 48 (empty -> .)
    LINE            reduce using rule 48 (empty -> .)

    multi_calc                     shift and go to state 105
    calc                           shift and go to state 99
    expr                           shift and go to state 2
    var_assign                     shift and go to state 3
    func_assign                    shift and go to state 4
    cout                           shift and go to state 5
    empty                          shift and go to state 6

state 101

    (36) multi_id -> multi_id COMMA ID .

    RPAREN          reduce using rule 36 (multi_id -> multi_id COMMA ID .)
    COMMA           reduce using rule 36 (multi_id -> multi_id COMMA ID .)


state 102

    (39) calc -> IF LPAREN expr RPAREN LCURLY multi_calc ELSE . multi_calc RCURLY
    (16) multi_calc -> . multi_calc LINE calc
    (17) multi_calc -> . calc
    (1) calc -> . expr
    (2) calc -> . var_assign
    (3) calc -> . func_assign
    (4) calc -> . cout
    (5) calc -> . empty
    (39) calc -> . IF LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY
    (40) calc -> . IF LPAREN expr RPAREN LCURLY multi_calc RCURLY
    (46) calc -> . ID LPAREN multi_expr RPAREN
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID
    (41) var_assign -> . LET ID EQ expr
    (45) var_assign -> . ID DBLT INPUT
    (42) func_assign -> . FUNC ID LPAREN multi_id RPAREN LCURLY multi_calc RCURLY
    (43) cout -> . OUTPUT DBLT expr
    (48) empty -> .

    IF              shift and go to state 7
    ID              shift and go to state 9
    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    LET             shift and go to state 17
    FUNC            shift and go to state 18
    OUTPUT          shift and go to state 19
    RCURLY          reduce using rule 48 (empty -> .)
    LINE            reduce using rule 48 (empty -> .)

    expr                           shift and go to state 2
    multi_calc                     shift and go to state 106
    calc                           shift and go to state 99
    var_assign                     shift and go to state 3
    func_assign                    shift and go to state 4
    cout                           shift and go to state 5
    empty                          shift and go to state 6

state 103

    (40) calc -> IF LPAREN expr RPAREN LCURLY multi_calc RCURLY .

    $end            reduce using rule 40 (calc -> IF LPAREN expr RPAREN LCURLY multi_calc RCURLY .)
    ELSE            reduce using rule 40 (calc -> IF LPAREN expr RPAREN LCURLY multi_calc RCURLY .)
    RCURLY          reduce using rule 40 (calc -> IF LPAREN expr RPAREN LCURLY multi_calc RCURLY .)
    LINE            reduce using rule 40 (calc -> IF LPAREN expr RPAREN LCURLY multi_calc RCURLY .)


state 104

    (16) multi_calc -> multi_calc LINE . calc
    (1) calc -> . expr
    (2) calc -> . var_assign
    (3) calc -> . func_assign
    (4) calc -> . cout
    (5) calc -> . empty
    (39) calc -> . IF LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY
    (40) calc -> . IF LPAREN expr RPAREN LCURLY multi_calc RCURLY
    (46) calc -> . ID LPAREN multi_expr RPAREN
    (6) expr -> . LPAREN expr PLUS expr RPAREN
    (7) expr -> . LPAREN expr MINUS expr RPAREN
    (8) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (9) expr -> . LPAREN expr DIVIDE expr RPAREN
    (10) expr -> . LPAREN expr INTDIV expr RPAREN
    (11) expr -> . LPAREN expr DBEQ expr RPAREN
    (12) expr -> . LPAREN expr EXEQ expr RPAREN
    (13) expr -> . LPAREN expr LT expr RPAREN
    (14) expr -> . LPAREN expr GT expr RPAREN
    (15) expr -> . LPAREN EX expr RPAREN
    (18) expr -> . expr MULTIPLY expr
    (19) expr -> . expr DIVIDE expr
    (20) expr -> . expr INTDIV expr
    (21) expr -> . expr PLUS expr
    (22) expr -> . expr MINUS expr
    (23) expr -> . expr DBEQ expr
    (24) expr -> . expr EXEQ expr
    (25) expr -> . expr LT expr
    (26) expr -> . expr GT expr
    (27) expr -> . EX expr
    (28) expr -> . PLUS expr
    (29) expr -> . MINUS expr
    (30) expr -> . INT
    (31) expr -> . FLOAT
    (35) expr -> . STRING
    (44) expr -> . INPUT
    (47) expr -> . ID
    (41) var_assign -> . LET ID EQ expr
    (45) var_assign -> . ID DBLT INPUT
    (42) func_assign -> . FUNC ID LPAREN multi_id RPAREN LCURLY multi_calc RCURLY
    (43) cout -> . OUTPUT DBLT expr
    (48) empty -> .

    IF              shift and go to state 7
    ID              shift and go to state 9
    LPAREN          shift and go to state 8
    EX              shift and go to state 12
    PLUS            shift and go to state 10
    MINUS           shift and go to state 11
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    INPUT           shift and go to state 16
    LET             shift and go to state 17
    FUNC            shift and go to state 18
    OUTPUT          shift and go to state 19
    ELSE            reduce using rule 48 (empty -> .)
    RCURLY          reduce using rule 48 (empty -> .)
    LINE            reduce using rule 48 (empty -> .)

    calc                           shift and go to state 107
    expr                           shift and go to state 2
    var_assign                     shift and go to state 3
    func_assign                    shift and go to state 4
    cout                           shift and go to state 5
    empty                          shift and go to state 6

state 105

    (42) func_assign -> FUNC ID LPAREN multi_id RPAREN LCURLY multi_calc . RCURLY
    (16) multi_calc -> multi_calc . LINE calc

    RCURLY          shift and go to state 108
    LINE            shift and go to state 104


state 106

    (39) calc -> IF LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc . RCURLY
    (16) multi_calc -> multi_calc . LINE calc

    RCURLY          shift and go to state 109
    LINE            shift and go to state 104


state 107

    (16) multi_calc -> multi_calc LINE calc .

    ELSE            reduce using rule 16 (multi_calc -> multi_calc LINE calc .)
    RCURLY          reduce using rule 16 (multi_calc -> multi_calc LINE calc .)
    LINE            reduce using rule 16 (multi_calc -> multi_calc LINE calc .)


state 108

    (42) func_assign -> FUNC ID LPAREN multi_id RPAREN LCURLY multi_calc RCURLY .

    $end            reduce using rule 42 (func_assign -> FUNC ID LPAREN multi_id RPAREN LCURLY multi_calc RCURLY .)
    ELSE            reduce using rule 42 (func_assign -> FUNC ID LPAREN multi_id RPAREN LCURLY multi_calc RCURLY .)
    RCURLY          reduce using rule 42 (func_assign -> FUNC ID LPAREN multi_id RPAREN LCURLY multi_calc RCURLY .)
    LINE            reduce using rule 42 (func_assign -> FUNC ID LPAREN multi_id RPAREN LCURLY multi_calc RCURLY .)


state 109

    (39) calc -> IF LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY .

    $end            reduce using rule 39 (calc -> IF LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY .)
    ELSE            reduce using rule 39 (calc -> IF LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY .)
    RCURLY          reduce using rule 39 (calc -> IF LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY .)
    LINE            reduce using rule 39 (calc -> IF LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY .)


Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON

Grammar

Rule 0     S' -> calc
Rule 1     calc -> expr
Rule 2     calc -> var_assign
Rule 3     calc -> func_assign
Rule 4     calc -> cout
Rule 5     expr -> LPAREN expr PLUS expr RPAREN
Rule 6     expr -> LPAREN expr MINUS expr RPAREN
Rule 7     expr -> LPAREN expr MULTIPLY expr RPAREN
Rule 8     expr -> LPAREN expr DIVIDE expr RPAREN
Rule 9     expr -> LPAREN expr INTDIV expr RPAREN
Rule 10    expr -> LPAREN expr DBEQ expr RPAREN
Rule 11    expr -> LPAREN expr EXEQ expr RPAREN
Rule 12    expr -> LPAREN expr LT expr RPAREN
Rule 13    expr -> LPAREN expr GT expr RPAREN
Rule 14    expr -> LPAREN EX expr RPAREN
Rule 15    multi_calc -> multi_calc LINE calc
Rule 16    multi_calc -> calc
Rule 17    expr -> expr MULTIPLY expr
Rule 18    expr -> expr DIVIDE expr
Rule 19    expr -> expr INTDIV expr
Rule 20    expr -> expr PLUS expr
Rule 21    expr -> expr MINUS expr
Rule 22    expr -> expr DBEQ expr
Rule 23    expr -> expr EXEQ expr
Rule 24    expr -> expr LT expr
Rule 25    expr -> expr GT expr
Rule 26    expr -> EX expr
Rule 27    expr -> PLUS expr
Rule 28    expr -> MINUS expr
Rule 29    expr -> INT
Rule 30    expr -> FLOAT
Rule 31    multi_expr -> multi_expr COMMA expr
Rule 32    multi_expr -> expr
Rule 33    expr -> STRING
Rule 34    multi_id -> multi_id COMMA ID
Rule 35    multi_id -> ID
Rule 36    calc -> IF LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY
Rule 37    calc -> IF LPAREN expr RPAREN LCURLY multi_calc RCURLY
Rule 38    var_assign -> LET ID EQ expr
Rule 39    func_assign -> FUNC ID LPAREN multi_id RPAREN LCURLY multi_calc RCURLY
Rule 40    cout -> OUTPUT DBLT expr
Rule 41    expr -> INPUT
Rule 42    var_assign -> ID DBLT INPUT
Rule 43    calc -> ID LPAREN multi_expr RPAREN
Rule 44    expr -> ID

Terminals, with rules where they appear

COLON                : 
COMMA                : 31 34
DBEQ                 : 10 22
DBLT                 : 40 42
DIVIDE               : 8 18
ELSE                 : 36
EQ                   : 38
EX                   : 14 26
EXEQ                 : 11 23
FLOAT                : 30
FUNC                 : 39
GT                   : 13 25
ID                   : 34 35 38 39 42 43 44
IF                   : 36 37
INPUT                : 41 42
INT                  : 29
INTDIV               : 9 19
LCURLY               : 36 37 39
LET                  : 38
LINE                 : 15
LPAREN               : 5 6 7 8 9 10 11 12 13 14 36 37 39 43
LT                   : 12 24
MINUS                : 6 21 28
MULTIPLY             : 7 17
OUTPUT               : 40
PLUS                 : 5 20 27
RCURLY               : 36 37 39
RPAREN               : 5 6 7 8 9 10 11 12 13 14 36 37 39 43
STRING               : 33
error                : 

Nonterminals, with rules where they appear

calc                 : 15 16 0
cout                 : 4
expr                 : 1 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 13 13 14 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 27 28 31 32 36 37 38 40
func_assign          : 3
multi_calc           : 15 36 36 37 39
multi_expr           : 31 43
multi_id             : 34 39
var_assign           : 2

Parsing method: LALR

state 0

    (0) S' -> . calc
    (1) calc -> . expr
    (2) calc -> . var_assign
    (3) calc -> . func_assign
    (4) calc -> . cout
    (36) calc -> . IF LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY
    (37) calc -> . IF LPAREN expr RPAREN LCURLY multi_calc RCURLY
    (43) calc -> . ID LPAREN multi_expr RPAREN
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID
    (38) var_assign -> . LET ID EQ expr
    (42) var_assign -> . ID DBLT INPUT
    (39) func_assign -> . FUNC ID LPAREN multi_id RPAREN LCURLY multi_calc RCURLY
    (40) cout -> . OUTPUT DBLT expr

    IF              shift and go to state 6
    ID              shift and go to state 8
    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    LET             shift and go to state 16
    FUNC            shift and go to state 17
    OUTPUT          shift and go to state 18

    calc                           shift and go to state 1
    expr                           shift and go to state 2
    var_assign                     shift and go to state 3
    func_assign                    shift and go to state 4
    cout                           shift and go to state 5

state 1

    (0) S' -> calc .



state 2

    (1) calc -> expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    $end            reduce using rule 1 (calc -> expr .)
    ELSE            reduce using rule 1 (calc -> expr .)
    RCURLY          reduce using rule 1 (calc -> expr .)
    LINE            reduce using rule 1 (calc -> expr .)
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    INTDIV          shift and go to state 21
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    DBEQ            shift and go to state 24
    EXEQ            shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27


state 3

    (2) calc -> var_assign .

    $end            reduce using rule 2 (calc -> var_assign .)
    ELSE            reduce using rule 2 (calc -> var_assign .)
    RCURLY          reduce using rule 2 (calc -> var_assign .)
    LINE            reduce using rule 2 (calc -> var_assign .)


state 4

    (3) calc -> func_assign .

    $end            reduce using rule 3 (calc -> func_assign .)
    ELSE            reduce using rule 3 (calc -> func_assign .)
    RCURLY          reduce using rule 3 (calc -> func_assign .)
    LINE            reduce using rule 3 (calc -> func_assign .)


state 5

    (4) calc -> cout .

    $end            reduce using rule 4 (calc -> cout .)
    ELSE            reduce using rule 4 (calc -> cout .)
    RCURLY          reduce using rule 4 (calc -> cout .)
    LINE            reduce using rule 4 (calc -> cout .)


state 6

    (36) calc -> IF . LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY
    (37) calc -> IF . LPAREN expr RPAREN LCURLY multi_calc RCURLY

    LPAREN          shift and go to state 28


state 7

    (5) expr -> LPAREN . expr PLUS expr RPAREN
    (6) expr -> LPAREN . expr MINUS expr RPAREN
    (7) expr -> LPAREN . expr MULTIPLY expr RPAREN
    (8) expr -> LPAREN . expr DIVIDE expr RPAREN
    (9) expr -> LPAREN . expr INTDIV expr RPAREN
    (10) expr -> LPAREN . expr DBEQ expr RPAREN
    (11) expr -> LPAREN . expr EXEQ expr RPAREN
    (12) expr -> LPAREN . expr LT expr RPAREN
    (13) expr -> LPAREN . expr GT expr RPAREN
    (14) expr -> LPAREN . EX expr RPAREN
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    EX              shift and go to state 30
    LPAREN          shift and go to state 7
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 29

state 8

    (43) calc -> ID . LPAREN multi_expr RPAREN
    (44) expr -> ID .
    (42) var_assign -> ID . DBLT INPUT

    LPAREN          shift and go to state 32
    MULTIPLY        reduce using rule 44 (expr -> ID .)
    DIVIDE          reduce using rule 44 (expr -> ID .)
    INTDIV          reduce using rule 44 (expr -> ID .)
    PLUS            reduce using rule 44 (expr -> ID .)
    MINUS           reduce using rule 44 (expr -> ID .)
    DBEQ            reduce using rule 44 (expr -> ID .)
    EXEQ            reduce using rule 44 (expr -> ID .)
    LT              reduce using rule 44 (expr -> ID .)
    GT              reduce using rule 44 (expr -> ID .)
    $end            reduce using rule 44 (expr -> ID .)
    ELSE            reduce using rule 44 (expr -> ID .)
    RCURLY          reduce using rule 44 (expr -> ID .)
    LINE            reduce using rule 44 (expr -> ID .)
    DBLT            shift and go to state 33


state 9

    (27) expr -> PLUS . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 34

state 10

    (28) expr -> MINUS . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 35

state 11

    (26) expr -> EX . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 36

state 12

    (29) expr -> INT .

    MULTIPLY        reduce using rule 29 (expr -> INT .)
    DIVIDE          reduce using rule 29 (expr -> INT .)
    INTDIV          reduce using rule 29 (expr -> INT .)
    PLUS            reduce using rule 29 (expr -> INT .)
    MINUS           reduce using rule 29 (expr -> INT .)
    DBEQ            reduce using rule 29 (expr -> INT .)
    EXEQ            reduce using rule 29 (expr -> INT .)
    LT              reduce using rule 29 (expr -> INT .)
    GT              reduce using rule 29 (expr -> INT .)
    $end            reduce using rule 29 (expr -> INT .)
    RPAREN          reduce using rule 29 (expr -> INT .)
    COMMA           reduce using rule 29 (expr -> INT .)
    ELSE            reduce using rule 29 (expr -> INT .)
    RCURLY          reduce using rule 29 (expr -> INT .)
    LINE            reduce using rule 29 (expr -> INT .)


state 13

    (30) expr -> FLOAT .

    MULTIPLY        reduce using rule 30 (expr -> FLOAT .)
    DIVIDE          reduce using rule 30 (expr -> FLOAT .)
    INTDIV          reduce using rule 30 (expr -> FLOAT .)
    PLUS            reduce using rule 30 (expr -> FLOAT .)
    MINUS           reduce using rule 30 (expr -> FLOAT .)
    DBEQ            reduce using rule 30 (expr -> FLOAT .)
    EXEQ            reduce using rule 30 (expr -> FLOAT .)
    LT              reduce using rule 30 (expr -> FLOAT .)
    GT              reduce using rule 30 (expr -> FLOAT .)
    $end            reduce using rule 30 (expr -> FLOAT .)
    RPAREN          reduce using rule 30 (expr -> FLOAT .)
    COMMA           reduce using rule 30 (expr -> FLOAT .)
    ELSE            reduce using rule 30 (expr -> FLOAT .)
    RCURLY          reduce using rule 30 (expr -> FLOAT .)
    LINE            reduce using rule 30 (expr -> FLOAT .)


state 14

    (33) expr -> STRING .

    MULTIPLY        reduce using rule 33 (expr -> STRING .)
    DIVIDE          reduce using rule 33 (expr -> STRING .)
    INTDIV          reduce using rule 33 (expr -> STRING .)
    PLUS            reduce using rule 33 (expr -> STRING .)
    MINUS           reduce using rule 33 (expr -> STRING .)
    DBEQ            reduce using rule 33 (expr -> STRING .)
    EXEQ            reduce using rule 33 (expr -> STRING .)
    LT              reduce using rule 33 (expr -> STRING .)
    GT              reduce using rule 33 (expr -> STRING .)
    $end            reduce using rule 33 (expr -> STRING .)
    RPAREN          reduce using rule 33 (expr -> STRING .)
    COMMA           reduce using rule 33 (expr -> STRING .)
    ELSE            reduce using rule 33 (expr -> STRING .)
    RCURLY          reduce using rule 33 (expr -> STRING .)
    LINE            reduce using rule 33 (expr -> STRING .)


state 15

    (41) expr -> INPUT .

    MULTIPLY        reduce using rule 41 (expr -> INPUT .)
    DIVIDE          reduce using rule 41 (expr -> INPUT .)
    INTDIV          reduce using rule 41 (expr -> INPUT .)
    PLUS            reduce using rule 41 (expr -> INPUT .)
    MINUS           reduce using rule 41 (expr -> INPUT .)
    DBEQ            reduce using rule 41 (expr -> INPUT .)
    EXEQ            reduce using rule 41 (expr -> INPUT .)
    LT              reduce using rule 41 (expr -> INPUT .)
    GT              reduce using rule 41 (expr -> INPUT .)
    $end            reduce using rule 41 (expr -> INPUT .)
    RPAREN          reduce using rule 41 (expr -> INPUT .)
    COMMA           reduce using rule 41 (expr -> INPUT .)
    ELSE            reduce using rule 41 (expr -> INPUT .)
    RCURLY          reduce using rule 41 (expr -> INPUT .)
    LINE            reduce using rule 41 (expr -> INPUT .)


state 16

    (38) var_assign -> LET . ID EQ expr

    ID              shift and go to state 37


state 17

    (39) func_assign -> FUNC . ID LPAREN multi_id RPAREN LCURLY multi_calc RCURLY

    ID              shift and go to state 38


state 18

    (40) cout -> OUTPUT . DBLT expr

    DBLT            shift and go to state 39


state 19

    (17) expr -> expr MULTIPLY . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 40

state 20

    (18) expr -> expr DIVIDE . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 41

state 21

    (19) expr -> expr INTDIV . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 42

state 22

    (20) expr -> expr PLUS . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 43

state 23

    (21) expr -> expr MINUS . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 44

state 24

    (22) expr -> expr DBEQ . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 45

state 25

    (23) expr -> expr EXEQ . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 46

state 26

    (24) expr -> expr LT . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 47

state 27

    (25) expr -> expr GT . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 48

state 28

    (36) calc -> IF LPAREN . expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY
    (37) calc -> IF LPAREN . expr RPAREN LCURLY multi_calc RCURLY
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 49

state 29

    (5) expr -> LPAREN expr . PLUS expr RPAREN
    (6) expr -> LPAREN expr . MINUS expr RPAREN
    (7) expr -> LPAREN expr . MULTIPLY expr RPAREN
    (8) expr -> LPAREN expr . DIVIDE expr RPAREN
    (9) expr -> LPAREN expr . INTDIV expr RPAREN
    (10) expr -> LPAREN expr . DBEQ expr RPAREN
    (11) expr -> LPAREN expr . EXEQ expr RPAREN
    (12) expr -> LPAREN expr . LT expr RPAREN
    (13) expr -> LPAREN expr . GT expr RPAREN
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    MULTIPLY        shift and go to state 52
    DIVIDE          shift and go to state 53
    INTDIV          shift and go to state 54
    DBEQ            shift and go to state 55
    EXEQ            shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58


state 30

    (14) expr -> LPAREN EX . expr RPAREN
    (26) expr -> EX . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 59

state 31

    (44) expr -> ID .

    PLUS            reduce using rule 44 (expr -> ID .)
    MINUS           reduce using rule 44 (expr -> ID .)
    MULTIPLY        reduce using rule 44 (expr -> ID .)
    DIVIDE          reduce using rule 44 (expr -> ID .)
    INTDIV          reduce using rule 44 (expr -> ID .)
    DBEQ            reduce using rule 44 (expr -> ID .)
    EXEQ            reduce using rule 44 (expr -> ID .)
    LT              reduce using rule 44 (expr -> ID .)
    GT              reduce using rule 44 (expr -> ID .)
    $end            reduce using rule 44 (expr -> ID .)
    RPAREN          reduce using rule 44 (expr -> ID .)
    COMMA           reduce using rule 44 (expr -> ID .)
    ELSE            reduce using rule 44 (expr -> ID .)
    RCURLY          reduce using rule 44 (expr -> ID .)
    LINE            reduce using rule 44 (expr -> ID .)


state 32

    (43) calc -> ID LPAREN . multi_expr RPAREN
    (31) multi_expr -> . multi_expr COMMA expr
    (32) multi_expr -> . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    multi_expr                     shift and go to state 60
    expr                           shift and go to state 61

state 33

    (42) var_assign -> ID DBLT . INPUT

    INPUT           shift and go to state 62


state 34

    (27) expr -> PLUS expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    PLUS            reduce using rule 27 (expr -> PLUS expr .)
    MINUS           reduce using rule 27 (expr -> PLUS expr .)
    $end            reduce using rule 27 (expr -> PLUS expr .)
    RPAREN          reduce using rule 27 (expr -> PLUS expr .)
    COMMA           reduce using rule 27 (expr -> PLUS expr .)
    ELSE            reduce using rule 27 (expr -> PLUS expr .)
    RCURLY          reduce using rule 27 (expr -> PLUS expr .)
    LINE            reduce using rule 27 (expr -> PLUS expr .)
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    INTDIV          shift and go to state 21
    DBEQ            shift and go to state 24
    EXEQ            shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27

  ! MULTIPLY        [ reduce using rule 27 (expr -> PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 27 (expr -> PLUS expr .) ]
  ! INTDIV          [ reduce using rule 27 (expr -> PLUS expr .) ]
  ! DBEQ            [ reduce using rule 27 (expr -> PLUS expr .) ]
  ! EXEQ            [ reduce using rule 27 (expr -> PLUS expr .) ]
  ! LT              [ reduce using rule 27 (expr -> PLUS expr .) ]
  ! GT              [ reduce using rule 27 (expr -> PLUS expr .) ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]


state 35

    (28) expr -> MINUS expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    PLUS            reduce using rule 28 (expr -> MINUS expr .)
    MINUS           reduce using rule 28 (expr -> MINUS expr .)
    $end            reduce using rule 28 (expr -> MINUS expr .)
    RPAREN          reduce using rule 28 (expr -> MINUS expr .)
    COMMA           reduce using rule 28 (expr -> MINUS expr .)
    ELSE            reduce using rule 28 (expr -> MINUS expr .)
    RCURLY          reduce using rule 28 (expr -> MINUS expr .)
    LINE            reduce using rule 28 (expr -> MINUS expr .)
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    INTDIV          shift and go to state 21
    DBEQ            shift and go to state 24
    EXEQ            shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27

  ! MULTIPLY        [ reduce using rule 28 (expr -> MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 28 (expr -> MINUS expr .) ]
  ! INTDIV          [ reduce using rule 28 (expr -> MINUS expr .) ]
  ! DBEQ            [ reduce using rule 28 (expr -> MINUS expr .) ]
  ! EXEQ            [ reduce using rule 28 (expr -> MINUS expr .) ]
  ! LT              [ reduce using rule 28 (expr -> MINUS expr .) ]
  ! GT              [ reduce using rule 28 (expr -> MINUS expr .) ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]


state 36

    (26) expr -> EX expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    MULTIPLY        reduce using rule 26 (expr -> EX expr .)
    DIVIDE          reduce using rule 26 (expr -> EX expr .)
    INTDIV          reduce using rule 26 (expr -> EX expr .)
    PLUS            reduce using rule 26 (expr -> EX expr .)
    MINUS           reduce using rule 26 (expr -> EX expr .)
    DBEQ            reduce using rule 26 (expr -> EX expr .)
    EXEQ            reduce using rule 26 (expr -> EX expr .)
    LT              reduce using rule 26 (expr -> EX expr .)
    GT              reduce using rule 26 (expr -> EX expr .)
    $end            reduce using rule 26 (expr -> EX expr .)
    RPAREN          reduce using rule 26 (expr -> EX expr .)
    COMMA           reduce using rule 26 (expr -> EX expr .)
    ELSE            reduce using rule 26 (expr -> EX expr .)
    RCURLY          reduce using rule 26 (expr -> EX expr .)
    LINE            reduce using rule 26 (expr -> EX expr .)

  ! MULTIPLY        [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]
  ! INTDIV          [ shift and go to state 21 ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]
  ! DBEQ            [ shift and go to state 24 ]
  ! EXEQ            [ shift and go to state 25 ]
  ! LT              [ shift and go to state 26 ]
  ! GT              [ shift and go to state 27 ]


state 37

    (38) var_assign -> LET ID . EQ expr

    EQ              shift and go to state 63


state 38

    (39) func_assign -> FUNC ID . LPAREN multi_id RPAREN LCURLY multi_calc RCURLY

    LPAREN          shift and go to state 64


state 39

    (40) cout -> OUTPUT DBLT . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 65

state 40

    (17) expr -> expr MULTIPLY expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    MULTIPLY        reduce using rule 17 (expr -> expr MULTIPLY expr .)
    DIVIDE          reduce using rule 17 (expr -> expr MULTIPLY expr .)
    INTDIV          reduce using rule 17 (expr -> expr MULTIPLY expr .)
    PLUS            reduce using rule 17 (expr -> expr MULTIPLY expr .)
    MINUS           reduce using rule 17 (expr -> expr MULTIPLY expr .)
    $end            reduce using rule 17 (expr -> expr MULTIPLY expr .)
    RPAREN          reduce using rule 17 (expr -> expr MULTIPLY expr .)
    COMMA           reduce using rule 17 (expr -> expr MULTIPLY expr .)
    ELSE            reduce using rule 17 (expr -> expr MULTIPLY expr .)
    RCURLY          reduce using rule 17 (expr -> expr MULTIPLY expr .)
    LINE            reduce using rule 17 (expr -> expr MULTIPLY expr .)
    DBEQ            shift and go to state 24
    EXEQ            shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27

  ! DBEQ            [ reduce using rule 17 (expr -> expr MULTIPLY expr .) ]
  ! EXEQ            [ reduce using rule 17 (expr -> expr MULTIPLY expr .) ]
  ! LT              [ reduce using rule 17 (expr -> expr MULTIPLY expr .) ]
  ! GT              [ reduce using rule 17 (expr -> expr MULTIPLY expr .) ]
  ! MULTIPLY        [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]
  ! INTDIV          [ shift and go to state 21 ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]


state 41

    (18) expr -> expr DIVIDE expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    MULTIPLY        reduce using rule 18 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 18 (expr -> expr DIVIDE expr .)
    INTDIV          reduce using rule 18 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 18 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 18 (expr -> expr DIVIDE expr .)
    $end            reduce using rule 18 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 18 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 18 (expr -> expr DIVIDE expr .)
    ELSE            reduce using rule 18 (expr -> expr DIVIDE expr .)
    RCURLY          reduce using rule 18 (expr -> expr DIVIDE expr .)
    LINE            reduce using rule 18 (expr -> expr DIVIDE expr .)
    DBEQ            shift and go to state 24
    EXEQ            shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27

  ! DBEQ            [ reduce using rule 18 (expr -> expr DIVIDE expr .) ]
  ! EXEQ            [ reduce using rule 18 (expr -> expr DIVIDE expr .) ]
  ! LT              [ reduce using rule 18 (expr -> expr DIVIDE expr .) ]
  ! GT              [ reduce using rule 18 (expr -> expr DIVIDE expr .) ]
  ! MULTIPLY        [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]
  ! INTDIV          [ shift and go to state 21 ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]


state 42

    (19) expr -> expr INTDIV expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    MULTIPLY        reduce using rule 19 (expr -> expr INTDIV expr .)
    DIVIDE          reduce using rule 19 (expr -> expr INTDIV expr .)
    INTDIV          reduce using rule 19 (expr -> expr INTDIV expr .)
    PLUS            reduce using rule 19 (expr -> expr INTDIV expr .)
    MINUS           reduce using rule 19 (expr -> expr INTDIV expr .)
    $end            reduce using rule 19 (expr -> expr INTDIV expr .)
    RPAREN          reduce using rule 19 (expr -> expr INTDIV expr .)
    COMMA           reduce using rule 19 (expr -> expr INTDIV expr .)
    ELSE            reduce using rule 19 (expr -> expr INTDIV expr .)
    RCURLY          reduce using rule 19 (expr -> expr INTDIV expr .)
    LINE            reduce using rule 19 (expr -> expr INTDIV expr .)
    DBEQ            shift and go to state 24
    EXEQ            shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27

  ! DBEQ            [ reduce using rule 19 (expr -> expr INTDIV expr .) ]
  ! EXEQ            [ reduce using rule 19 (expr -> expr INTDIV expr .) ]
  ! LT              [ reduce using rule 19 (expr -> expr INTDIV expr .) ]
  ! GT              [ reduce using rule 19 (expr -> expr INTDIV expr .) ]
  ! MULTIPLY        [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]
  ! INTDIV          [ shift and go to state 21 ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]


state 43

    (20) expr -> expr PLUS expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    PLUS            reduce using rule 20 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 20 (expr -> expr PLUS expr .)
    $end            reduce using rule 20 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 20 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 20 (expr -> expr PLUS expr .)
    ELSE            reduce using rule 20 (expr -> expr PLUS expr .)
    RCURLY          reduce using rule 20 (expr -> expr PLUS expr .)
    LINE            reduce using rule 20 (expr -> expr PLUS expr .)
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    INTDIV          shift and go to state 21
    DBEQ            shift and go to state 24
    EXEQ            shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27

  ! MULTIPLY        [ reduce using rule 20 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 20 (expr -> expr PLUS expr .) ]
  ! INTDIV          [ reduce using rule 20 (expr -> expr PLUS expr .) ]
  ! DBEQ            [ reduce using rule 20 (expr -> expr PLUS expr .) ]
  ! EXEQ            [ reduce using rule 20 (expr -> expr PLUS expr .) ]
  ! LT              [ reduce using rule 20 (expr -> expr PLUS expr .) ]
  ! GT              [ reduce using rule 20 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]


state 44

    (21) expr -> expr MINUS expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    PLUS            reduce using rule 21 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 21 (expr -> expr MINUS expr .)
    $end            reduce using rule 21 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 21 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 21 (expr -> expr MINUS expr .)
    ELSE            reduce using rule 21 (expr -> expr MINUS expr .)
    RCURLY          reduce using rule 21 (expr -> expr MINUS expr .)
    LINE            reduce using rule 21 (expr -> expr MINUS expr .)
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    INTDIV          shift and go to state 21
    DBEQ            shift and go to state 24
    EXEQ            shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27

  ! MULTIPLY        [ reduce using rule 21 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 21 (expr -> expr MINUS expr .) ]
  ! INTDIV          [ reduce using rule 21 (expr -> expr MINUS expr .) ]
  ! DBEQ            [ reduce using rule 21 (expr -> expr MINUS expr .) ]
  ! EXEQ            [ reduce using rule 21 (expr -> expr MINUS expr .) ]
  ! LT              [ reduce using rule 21 (expr -> expr MINUS expr .) ]
  ! GT              [ reduce using rule 21 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]


state 45

    (22) expr -> expr DBEQ expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    MULTIPLY        reduce using rule 22 (expr -> expr DBEQ expr .)
    DIVIDE          reduce using rule 22 (expr -> expr DBEQ expr .)
    INTDIV          reduce using rule 22 (expr -> expr DBEQ expr .)
    PLUS            reduce using rule 22 (expr -> expr DBEQ expr .)
    MINUS           reduce using rule 22 (expr -> expr DBEQ expr .)
    DBEQ            reduce using rule 22 (expr -> expr DBEQ expr .)
    EXEQ            reduce using rule 22 (expr -> expr DBEQ expr .)
    LT              reduce using rule 22 (expr -> expr DBEQ expr .)
    GT              reduce using rule 22 (expr -> expr DBEQ expr .)
    $end            reduce using rule 22 (expr -> expr DBEQ expr .)
    RPAREN          reduce using rule 22 (expr -> expr DBEQ expr .)
    COMMA           reduce using rule 22 (expr -> expr DBEQ expr .)
    ELSE            reduce using rule 22 (expr -> expr DBEQ expr .)
    RCURLY          reduce using rule 22 (expr -> expr DBEQ expr .)
    LINE            reduce using rule 22 (expr -> expr DBEQ expr .)

  ! MULTIPLY        [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]
  ! INTDIV          [ shift and go to state 21 ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]
  ! DBEQ            [ shift and go to state 24 ]
  ! EXEQ            [ shift and go to state 25 ]
  ! LT              [ shift and go to state 26 ]
  ! GT              [ shift and go to state 27 ]


state 46

    (23) expr -> expr EXEQ expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    MULTIPLY        reduce using rule 23 (expr -> expr EXEQ expr .)
    DIVIDE          reduce using rule 23 (expr -> expr EXEQ expr .)
    INTDIV          reduce using rule 23 (expr -> expr EXEQ expr .)
    PLUS            reduce using rule 23 (expr -> expr EXEQ expr .)
    MINUS           reduce using rule 23 (expr -> expr EXEQ expr .)
    DBEQ            reduce using rule 23 (expr -> expr EXEQ expr .)
    EXEQ            reduce using rule 23 (expr -> expr EXEQ expr .)
    LT              reduce using rule 23 (expr -> expr EXEQ expr .)
    GT              reduce using rule 23 (expr -> expr EXEQ expr .)
    $end            reduce using rule 23 (expr -> expr EXEQ expr .)
    RPAREN          reduce using rule 23 (expr -> expr EXEQ expr .)
    COMMA           reduce using rule 23 (expr -> expr EXEQ expr .)
    ELSE            reduce using rule 23 (expr -> expr EXEQ expr .)
    RCURLY          reduce using rule 23 (expr -> expr EXEQ expr .)
    LINE            reduce using rule 23 (expr -> expr EXEQ expr .)

  ! MULTIPLY        [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]
  ! INTDIV          [ shift and go to state 21 ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]
  ! DBEQ            [ shift and go to state 24 ]
  ! EXEQ            [ shift and go to state 25 ]
  ! LT              [ shift and go to state 26 ]
  ! GT              [ shift and go to state 27 ]


state 47

    (24) expr -> expr LT expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    MULTIPLY        reduce using rule 24 (expr -> expr LT expr .)
    DIVIDE          reduce using rule 24 (expr -> expr LT expr .)
    INTDIV          reduce using rule 24 (expr -> expr LT expr .)
    PLUS            reduce using rule 24 (expr -> expr LT expr .)
    MINUS           reduce using rule 24 (expr -> expr LT expr .)
    DBEQ            reduce using rule 24 (expr -> expr LT expr .)
    EXEQ            reduce using rule 24 (expr -> expr LT expr .)
    LT              reduce using rule 24 (expr -> expr LT expr .)
    GT              reduce using rule 24 (expr -> expr LT expr .)
    $end            reduce using rule 24 (expr -> expr LT expr .)
    RPAREN          reduce using rule 24 (expr -> expr LT expr .)
    COMMA           reduce using rule 24 (expr -> expr LT expr .)
    ELSE            reduce using rule 24 (expr -> expr LT expr .)
    RCURLY          reduce using rule 24 (expr -> expr LT expr .)
    LINE            reduce using rule 24 (expr -> expr LT expr .)

  ! MULTIPLY        [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]
  ! INTDIV          [ shift and go to state 21 ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]
  ! DBEQ            [ shift and go to state 24 ]
  ! EXEQ            [ shift and go to state 25 ]
  ! LT              [ shift and go to state 26 ]
  ! GT              [ shift and go to state 27 ]


state 48

    (25) expr -> expr GT expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    MULTIPLY        reduce using rule 25 (expr -> expr GT expr .)
    DIVIDE          reduce using rule 25 (expr -> expr GT expr .)
    INTDIV          reduce using rule 25 (expr -> expr GT expr .)
    PLUS            reduce using rule 25 (expr -> expr GT expr .)
    MINUS           reduce using rule 25 (expr -> expr GT expr .)
    DBEQ            reduce using rule 25 (expr -> expr GT expr .)
    EXEQ            reduce using rule 25 (expr -> expr GT expr .)
    LT              reduce using rule 25 (expr -> expr GT expr .)
    GT              reduce using rule 25 (expr -> expr GT expr .)
    $end            reduce using rule 25 (expr -> expr GT expr .)
    RPAREN          reduce using rule 25 (expr -> expr GT expr .)
    COMMA           reduce using rule 25 (expr -> expr GT expr .)
    ELSE            reduce using rule 25 (expr -> expr GT expr .)
    RCURLY          reduce using rule 25 (expr -> expr GT expr .)
    LINE            reduce using rule 25 (expr -> expr GT expr .)

  ! MULTIPLY        [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]
  ! INTDIV          [ shift and go to state 21 ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]
  ! DBEQ            [ shift and go to state 24 ]
  ! EXEQ            [ shift and go to state 25 ]
  ! LT              [ shift and go to state 26 ]
  ! GT              [ shift and go to state 27 ]


state 49

    (36) calc -> IF LPAREN expr . RPAREN LCURLY multi_calc ELSE multi_calc RCURLY
    (37) calc -> IF LPAREN expr . RPAREN LCURLY multi_calc RCURLY
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    RPAREN          shift and go to state 66
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    INTDIV          shift and go to state 21
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    DBEQ            shift and go to state 24
    EXEQ            shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27


state 50

    (5) expr -> LPAREN expr PLUS . expr RPAREN
    (20) expr -> expr PLUS . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 67

state 51

    (6) expr -> LPAREN expr MINUS . expr RPAREN
    (21) expr -> expr MINUS . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 68

state 52

    (7) expr -> LPAREN expr MULTIPLY . expr RPAREN
    (17) expr -> expr MULTIPLY . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 69

state 53

    (8) expr -> LPAREN expr DIVIDE . expr RPAREN
    (18) expr -> expr DIVIDE . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 70

state 54

    (9) expr -> LPAREN expr INTDIV . expr RPAREN
    (19) expr -> expr INTDIV . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 71

state 55

    (10) expr -> LPAREN expr DBEQ . expr RPAREN
    (22) expr -> expr DBEQ . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 72

state 56

    (11) expr -> LPAREN expr EXEQ . expr RPAREN
    (23) expr -> expr EXEQ . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 73

state 57

    (12) expr -> LPAREN expr LT . expr RPAREN
    (24) expr -> expr LT . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 74

state 58

    (13) expr -> LPAREN expr GT . expr RPAREN
    (25) expr -> expr GT . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 75

state 59

    (14) expr -> LPAREN EX expr . RPAREN
    (26) expr -> EX expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    RPAREN          shift and go to state 76
    PLUS            reduce using rule 26 (expr -> EX expr .)
    MINUS           reduce using rule 26 (expr -> EX expr .)
    MULTIPLY        reduce using rule 26 (expr -> EX expr .)
    DIVIDE          reduce using rule 26 (expr -> EX expr .)
    INTDIV          reduce using rule 26 (expr -> EX expr .)
    DBEQ            reduce using rule 26 (expr -> EX expr .)
    EXEQ            reduce using rule 26 (expr -> EX expr .)
    LT              reduce using rule 26 (expr -> EX expr .)
    GT              reduce using rule 26 (expr -> EX expr .)

  ! MULTIPLY        [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]
  ! INTDIV          [ shift and go to state 21 ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]
  ! DBEQ            [ shift and go to state 24 ]
  ! EXEQ            [ shift and go to state 25 ]
  ! LT              [ shift and go to state 26 ]
  ! GT              [ shift and go to state 27 ]


state 60

    (43) calc -> ID LPAREN multi_expr . RPAREN
    (31) multi_expr -> multi_expr . COMMA expr

    RPAREN          shift and go to state 77
    COMMA           shift and go to state 78


state 61

    (32) multi_expr -> expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    RPAREN          reduce using rule 32 (multi_expr -> expr .)
    COMMA           reduce using rule 32 (multi_expr -> expr .)
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    INTDIV          shift and go to state 21
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    DBEQ            shift and go to state 24
    EXEQ            shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27


state 62

    (42) var_assign -> ID DBLT INPUT .

    $end            reduce using rule 42 (var_assign -> ID DBLT INPUT .)
    ELSE            reduce using rule 42 (var_assign -> ID DBLT INPUT .)
    RCURLY          reduce using rule 42 (var_assign -> ID DBLT INPUT .)
    LINE            reduce using rule 42 (var_assign -> ID DBLT INPUT .)


state 63

    (38) var_assign -> LET ID EQ . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 79

state 64

    (39) func_assign -> FUNC ID LPAREN . multi_id RPAREN LCURLY multi_calc RCURLY
    (34) multi_id -> . multi_id COMMA ID
    (35) multi_id -> . ID

    ID              shift and go to state 80

    multi_id                       shift and go to state 81

state 65

    (40) cout -> OUTPUT DBLT expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    $end            reduce using rule 40 (cout -> OUTPUT DBLT expr .)
    ELSE            reduce using rule 40 (cout -> OUTPUT DBLT expr .)
    RCURLY          reduce using rule 40 (cout -> OUTPUT DBLT expr .)
    LINE            reduce using rule 40 (cout -> OUTPUT DBLT expr .)
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    INTDIV          shift and go to state 21
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    DBEQ            shift and go to state 24
    EXEQ            shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27


state 66

    (36) calc -> IF LPAREN expr RPAREN . LCURLY multi_calc ELSE multi_calc RCURLY
    (37) calc -> IF LPAREN expr RPAREN . LCURLY multi_calc RCURLY

    LCURLY          shift and go to state 82


state 67

    (5) expr -> LPAREN expr PLUS expr . RPAREN
    (20) expr -> expr PLUS expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    RPAREN          shift and go to state 83
    PLUS            reduce using rule 20 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 20 (expr -> expr PLUS expr .)
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    INTDIV          shift and go to state 21
    DBEQ            shift and go to state 24
    EXEQ            shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27

  ! MULTIPLY        [ reduce using rule 20 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 20 (expr -> expr PLUS expr .) ]
  ! INTDIV          [ reduce using rule 20 (expr -> expr PLUS expr .) ]
  ! DBEQ            [ reduce using rule 20 (expr -> expr PLUS expr .) ]
  ! EXEQ            [ reduce using rule 20 (expr -> expr PLUS expr .) ]
  ! LT              [ reduce using rule 20 (expr -> expr PLUS expr .) ]
  ! GT              [ reduce using rule 20 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]


state 68

    (6) expr -> LPAREN expr MINUS expr . RPAREN
    (21) expr -> expr MINUS expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    RPAREN          shift and go to state 84
    PLUS            reduce using rule 21 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 21 (expr -> expr MINUS expr .)
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    INTDIV          shift and go to state 21
    DBEQ            shift and go to state 24
    EXEQ            shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27

  ! MULTIPLY        [ reduce using rule 21 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 21 (expr -> expr MINUS expr .) ]
  ! INTDIV          [ reduce using rule 21 (expr -> expr MINUS expr .) ]
  ! DBEQ            [ reduce using rule 21 (expr -> expr MINUS expr .) ]
  ! EXEQ            [ reduce using rule 21 (expr -> expr MINUS expr .) ]
  ! LT              [ reduce using rule 21 (expr -> expr MINUS expr .) ]
  ! GT              [ reduce using rule 21 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]


state 69

    (7) expr -> LPAREN expr MULTIPLY expr . RPAREN
    (17) expr -> expr MULTIPLY expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    RPAREN          shift and go to state 85
    PLUS            reduce using rule 17 (expr -> expr MULTIPLY expr .)
    MINUS           reduce using rule 17 (expr -> expr MULTIPLY expr .)
    MULTIPLY        reduce using rule 17 (expr -> expr MULTIPLY expr .)
    DIVIDE          reduce using rule 17 (expr -> expr MULTIPLY expr .)
    INTDIV          reduce using rule 17 (expr -> expr MULTIPLY expr .)
    DBEQ            shift and go to state 24
    EXEQ            shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27

  ! DBEQ            [ reduce using rule 17 (expr -> expr MULTIPLY expr .) ]
  ! EXEQ            [ reduce using rule 17 (expr -> expr MULTIPLY expr .) ]
  ! LT              [ reduce using rule 17 (expr -> expr MULTIPLY expr .) ]
  ! GT              [ reduce using rule 17 (expr -> expr MULTIPLY expr .) ]
  ! MULTIPLY        [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]
  ! INTDIV          [ shift and go to state 21 ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]


state 70

    (8) expr -> LPAREN expr DIVIDE expr . RPAREN
    (18) expr -> expr DIVIDE expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    RPAREN          shift and go to state 86
    PLUS            reduce using rule 18 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 18 (expr -> expr DIVIDE expr .)
    MULTIPLY        reduce using rule 18 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 18 (expr -> expr DIVIDE expr .)
    INTDIV          reduce using rule 18 (expr -> expr DIVIDE expr .)
    DBEQ            shift and go to state 24
    EXEQ            shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27

  ! DBEQ            [ reduce using rule 18 (expr -> expr DIVIDE expr .) ]
  ! EXEQ            [ reduce using rule 18 (expr -> expr DIVIDE expr .) ]
  ! LT              [ reduce using rule 18 (expr -> expr DIVIDE expr .) ]
  ! GT              [ reduce using rule 18 (expr -> expr DIVIDE expr .) ]
  ! MULTIPLY        [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]
  ! INTDIV          [ shift and go to state 21 ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]


state 71

    (9) expr -> LPAREN expr INTDIV expr . RPAREN
    (19) expr -> expr INTDIV expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    RPAREN          shift and go to state 87
    PLUS            reduce using rule 19 (expr -> expr INTDIV expr .)
    MINUS           reduce using rule 19 (expr -> expr INTDIV expr .)
    MULTIPLY        reduce using rule 19 (expr -> expr INTDIV expr .)
    DIVIDE          reduce using rule 19 (expr -> expr INTDIV expr .)
    INTDIV          reduce using rule 19 (expr -> expr INTDIV expr .)
    DBEQ            shift and go to state 24
    EXEQ            shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27

  ! DBEQ            [ reduce using rule 19 (expr -> expr INTDIV expr .) ]
  ! EXEQ            [ reduce using rule 19 (expr -> expr INTDIV expr .) ]
  ! LT              [ reduce using rule 19 (expr -> expr INTDIV expr .) ]
  ! GT              [ reduce using rule 19 (expr -> expr INTDIV expr .) ]
  ! MULTIPLY        [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]
  ! INTDIV          [ shift and go to state 21 ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]


state 72

    (10) expr -> LPAREN expr DBEQ expr . RPAREN
    (22) expr -> expr DBEQ expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    RPAREN          shift and go to state 88
    PLUS            reduce using rule 22 (expr -> expr DBEQ expr .)
    MINUS           reduce using rule 22 (expr -> expr DBEQ expr .)
    MULTIPLY        reduce using rule 22 (expr -> expr DBEQ expr .)
    DIVIDE          reduce using rule 22 (expr -> expr DBEQ expr .)
    INTDIV          reduce using rule 22 (expr -> expr DBEQ expr .)
    DBEQ            reduce using rule 22 (expr -> expr DBEQ expr .)
    EXEQ            reduce using rule 22 (expr -> expr DBEQ expr .)
    LT              reduce using rule 22 (expr -> expr DBEQ expr .)
    GT              reduce using rule 22 (expr -> expr DBEQ expr .)

  ! MULTIPLY        [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]
  ! INTDIV          [ shift and go to state 21 ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]
  ! DBEQ            [ shift and go to state 24 ]
  ! EXEQ            [ shift and go to state 25 ]
  ! LT              [ shift and go to state 26 ]
  ! GT              [ shift and go to state 27 ]


state 73

    (11) expr -> LPAREN expr EXEQ expr . RPAREN
    (23) expr -> expr EXEQ expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    RPAREN          shift and go to state 89
    PLUS            reduce using rule 23 (expr -> expr EXEQ expr .)
    MINUS           reduce using rule 23 (expr -> expr EXEQ expr .)
    MULTIPLY        reduce using rule 23 (expr -> expr EXEQ expr .)
    DIVIDE          reduce using rule 23 (expr -> expr EXEQ expr .)
    INTDIV          reduce using rule 23 (expr -> expr EXEQ expr .)
    DBEQ            reduce using rule 23 (expr -> expr EXEQ expr .)
    EXEQ            reduce using rule 23 (expr -> expr EXEQ expr .)
    LT              reduce using rule 23 (expr -> expr EXEQ expr .)
    GT              reduce using rule 23 (expr -> expr EXEQ expr .)

  ! MULTIPLY        [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]
  ! INTDIV          [ shift and go to state 21 ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]
  ! DBEQ            [ shift and go to state 24 ]
  ! EXEQ            [ shift and go to state 25 ]
  ! LT              [ shift and go to state 26 ]
  ! GT              [ shift and go to state 27 ]


state 74

    (12) expr -> LPAREN expr LT expr . RPAREN
    (24) expr -> expr LT expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    RPAREN          shift and go to state 90
    PLUS            reduce using rule 24 (expr -> expr LT expr .)
    MINUS           reduce using rule 24 (expr -> expr LT expr .)
    MULTIPLY        reduce using rule 24 (expr -> expr LT expr .)
    DIVIDE          reduce using rule 24 (expr -> expr LT expr .)
    INTDIV          reduce using rule 24 (expr -> expr LT expr .)
    DBEQ            reduce using rule 24 (expr -> expr LT expr .)
    EXEQ            reduce using rule 24 (expr -> expr LT expr .)
    LT              reduce using rule 24 (expr -> expr LT expr .)
    GT              reduce using rule 24 (expr -> expr LT expr .)

  ! MULTIPLY        [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]
  ! INTDIV          [ shift and go to state 21 ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]
  ! DBEQ            [ shift and go to state 24 ]
  ! EXEQ            [ shift and go to state 25 ]
  ! LT              [ shift and go to state 26 ]
  ! GT              [ shift and go to state 27 ]


state 75

    (13) expr -> LPAREN expr GT expr . RPAREN
    (25) expr -> expr GT expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    RPAREN          shift and go to state 91
    PLUS            reduce using rule 25 (expr -> expr GT expr .)
    MINUS           reduce using rule 25 (expr -> expr GT expr .)
    MULTIPLY        reduce using rule 25 (expr -> expr GT expr .)
    DIVIDE          reduce using rule 25 (expr -> expr GT expr .)
    INTDIV          reduce using rule 25 (expr -> expr GT expr .)
    DBEQ            reduce using rule 25 (expr -> expr GT expr .)
    EXEQ            reduce using rule 25 (expr -> expr GT expr .)
    LT              reduce using rule 25 (expr -> expr GT expr .)
    GT              reduce using rule 25 (expr -> expr GT expr .)

  ! MULTIPLY        [ shift and go to state 19 ]
  ! DIVIDE          [ shift and go to state 20 ]
  ! INTDIV          [ shift and go to state 21 ]
  ! PLUS            [ shift and go to state 22 ]
  ! MINUS           [ shift and go to state 23 ]
  ! DBEQ            [ shift and go to state 24 ]
  ! EXEQ            [ shift and go to state 25 ]
  ! LT              [ shift and go to state 26 ]
  ! GT              [ shift and go to state 27 ]


state 76

    (14) expr -> LPAREN EX expr RPAREN .

    MULTIPLY        reduce using rule 14 (expr -> LPAREN EX expr RPAREN .)
    DIVIDE          reduce using rule 14 (expr -> LPAREN EX expr RPAREN .)
    INTDIV          reduce using rule 14 (expr -> LPAREN EX expr RPAREN .)
    PLUS            reduce using rule 14 (expr -> LPAREN EX expr RPAREN .)
    MINUS           reduce using rule 14 (expr -> LPAREN EX expr RPAREN .)
    DBEQ            reduce using rule 14 (expr -> LPAREN EX expr RPAREN .)
    EXEQ            reduce using rule 14 (expr -> LPAREN EX expr RPAREN .)
    LT              reduce using rule 14 (expr -> LPAREN EX expr RPAREN .)
    GT              reduce using rule 14 (expr -> LPAREN EX expr RPAREN .)
    $end            reduce using rule 14 (expr -> LPAREN EX expr RPAREN .)
    RPAREN          reduce using rule 14 (expr -> LPAREN EX expr RPAREN .)
    COMMA           reduce using rule 14 (expr -> LPAREN EX expr RPAREN .)
    ELSE            reduce using rule 14 (expr -> LPAREN EX expr RPAREN .)
    RCURLY          reduce using rule 14 (expr -> LPAREN EX expr RPAREN .)
    LINE            reduce using rule 14 (expr -> LPAREN EX expr RPAREN .)


state 77

    (43) calc -> ID LPAREN multi_expr RPAREN .

    $end            reduce using rule 43 (calc -> ID LPAREN multi_expr RPAREN .)
    ELSE            reduce using rule 43 (calc -> ID LPAREN multi_expr RPAREN .)
    RCURLY          reduce using rule 43 (calc -> ID LPAREN multi_expr RPAREN .)
    LINE            reduce using rule 43 (calc -> ID LPAREN multi_expr RPAREN .)


state 78

    (31) multi_expr -> multi_expr COMMA . expr
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID

    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    ID              shift and go to state 31

    expr                           shift and go to state 92

state 79

    (38) var_assign -> LET ID EQ expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    $end            reduce using rule 38 (var_assign -> LET ID EQ expr .)
    ELSE            reduce using rule 38 (var_assign -> LET ID EQ expr .)
    RCURLY          reduce using rule 38 (var_assign -> LET ID EQ expr .)
    LINE            reduce using rule 38 (var_assign -> LET ID EQ expr .)
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    INTDIV          shift and go to state 21
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    DBEQ            shift and go to state 24
    EXEQ            shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27


state 80

    (35) multi_id -> ID .

    RPAREN          reduce using rule 35 (multi_id -> ID .)
    COMMA           reduce using rule 35 (multi_id -> ID .)


state 81

    (39) func_assign -> FUNC ID LPAREN multi_id . RPAREN LCURLY multi_calc RCURLY
    (34) multi_id -> multi_id . COMMA ID

    RPAREN          shift and go to state 93
    COMMA           shift and go to state 94


state 82

    (36) calc -> IF LPAREN expr RPAREN LCURLY . multi_calc ELSE multi_calc RCURLY
    (37) calc -> IF LPAREN expr RPAREN LCURLY . multi_calc RCURLY
    (15) multi_calc -> . multi_calc LINE calc
    (16) multi_calc -> . calc
    (1) calc -> . expr
    (2) calc -> . var_assign
    (3) calc -> . func_assign
    (4) calc -> . cout
    (36) calc -> . IF LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY
    (37) calc -> . IF LPAREN expr RPAREN LCURLY multi_calc RCURLY
    (43) calc -> . ID LPAREN multi_expr RPAREN
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID
    (38) var_assign -> . LET ID EQ expr
    (42) var_assign -> . ID DBLT INPUT
    (39) func_assign -> . FUNC ID LPAREN multi_id RPAREN LCURLY multi_calc RCURLY
    (40) cout -> . OUTPUT DBLT expr

    IF              shift and go to state 6
    ID              shift and go to state 8
    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    LET             shift and go to state 16
    FUNC            shift and go to state 17
    OUTPUT          shift and go to state 18

    expr                           shift and go to state 2
    multi_calc                     shift and go to state 95
    calc                           shift and go to state 96
    var_assign                     shift and go to state 3
    func_assign                    shift and go to state 4
    cout                           shift and go to state 5

state 83

    (5) expr -> LPAREN expr PLUS expr RPAREN .

    MULTIPLY        reduce using rule 5 (expr -> LPAREN expr PLUS expr RPAREN .)
    DIVIDE          reduce using rule 5 (expr -> LPAREN expr PLUS expr RPAREN .)
    INTDIV          reduce using rule 5 (expr -> LPAREN expr PLUS expr RPAREN .)
    PLUS            reduce using rule 5 (expr -> LPAREN expr PLUS expr RPAREN .)
    MINUS           reduce using rule 5 (expr -> LPAREN expr PLUS expr RPAREN .)
    DBEQ            reduce using rule 5 (expr -> LPAREN expr PLUS expr RPAREN .)
    EXEQ            reduce using rule 5 (expr -> LPAREN expr PLUS expr RPAREN .)
    LT              reduce using rule 5 (expr -> LPAREN expr PLUS expr RPAREN .)
    GT              reduce using rule 5 (expr -> LPAREN expr PLUS expr RPAREN .)
    $end            reduce using rule 5 (expr -> LPAREN expr PLUS expr RPAREN .)
    RPAREN          reduce using rule 5 (expr -> LPAREN expr PLUS expr RPAREN .)
    COMMA           reduce using rule 5 (expr -> LPAREN expr PLUS expr RPAREN .)
    ELSE            reduce using rule 5 (expr -> LPAREN expr PLUS expr RPAREN .)
    RCURLY          reduce using rule 5 (expr -> LPAREN expr PLUS expr RPAREN .)
    LINE            reduce using rule 5 (expr -> LPAREN expr PLUS expr RPAREN .)


state 84

    (6) expr -> LPAREN expr MINUS expr RPAREN .

    MULTIPLY        reduce using rule 6 (expr -> LPAREN expr MINUS expr RPAREN .)
    DIVIDE          reduce using rule 6 (expr -> LPAREN expr MINUS expr RPAREN .)
    INTDIV          reduce using rule 6 (expr -> LPAREN expr MINUS expr RPAREN .)
    PLUS            reduce using rule 6 (expr -> LPAREN expr MINUS expr RPAREN .)
    MINUS           reduce using rule 6 (expr -> LPAREN expr MINUS expr RPAREN .)
    DBEQ            reduce using rule 6 (expr -> LPAREN expr MINUS expr RPAREN .)
    EXEQ            reduce using rule 6 (expr -> LPAREN expr MINUS expr RPAREN .)
    LT              reduce using rule 6 (expr -> LPAREN expr MINUS expr RPAREN .)
    GT              reduce using rule 6 (expr -> LPAREN expr MINUS expr RPAREN .)
    $end            reduce using rule 6 (expr -> LPAREN expr MINUS expr RPAREN .)
    RPAREN          reduce using rule 6 (expr -> LPAREN expr MINUS expr RPAREN .)
    COMMA           reduce using rule 6 (expr -> LPAREN expr MINUS expr RPAREN .)
    ELSE            reduce using rule 6 (expr -> LPAREN expr MINUS expr RPAREN .)
    RCURLY          reduce using rule 6 (expr -> LPAREN expr MINUS expr RPAREN .)
    LINE            reduce using rule 6 (expr -> LPAREN expr MINUS expr RPAREN .)


state 85

    (7) expr -> LPAREN expr MULTIPLY expr RPAREN .

    MULTIPLY        reduce using rule 7 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    DIVIDE          reduce using rule 7 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    INTDIV          reduce using rule 7 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    PLUS            reduce using rule 7 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    MINUS           reduce using rule 7 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    DBEQ            reduce using rule 7 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    EXEQ            reduce using rule 7 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    LT              reduce using rule 7 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    GT              reduce using rule 7 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    $end            reduce using rule 7 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    RPAREN          reduce using rule 7 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    COMMA           reduce using rule 7 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    ELSE            reduce using rule 7 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    RCURLY          reduce using rule 7 (expr -> LPAREN expr MULTIPLY expr RPAREN .)
    LINE            reduce using rule 7 (expr -> LPAREN expr MULTIPLY expr RPAREN .)


state 86

    (8) expr -> LPAREN expr DIVIDE expr RPAREN .

    MULTIPLY        reduce using rule 8 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    DIVIDE          reduce using rule 8 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    INTDIV          reduce using rule 8 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    PLUS            reduce using rule 8 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    MINUS           reduce using rule 8 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    DBEQ            reduce using rule 8 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    EXEQ            reduce using rule 8 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    LT              reduce using rule 8 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    GT              reduce using rule 8 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    $end            reduce using rule 8 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    RPAREN          reduce using rule 8 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    COMMA           reduce using rule 8 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    ELSE            reduce using rule 8 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    RCURLY          reduce using rule 8 (expr -> LPAREN expr DIVIDE expr RPAREN .)
    LINE            reduce using rule 8 (expr -> LPAREN expr DIVIDE expr RPAREN .)


state 87

    (9) expr -> LPAREN expr INTDIV expr RPAREN .

    MULTIPLY        reduce using rule 9 (expr -> LPAREN expr INTDIV expr RPAREN .)
    DIVIDE          reduce using rule 9 (expr -> LPAREN expr INTDIV expr RPAREN .)
    INTDIV          reduce using rule 9 (expr -> LPAREN expr INTDIV expr RPAREN .)
    PLUS            reduce using rule 9 (expr -> LPAREN expr INTDIV expr RPAREN .)
    MINUS           reduce using rule 9 (expr -> LPAREN expr INTDIV expr RPAREN .)
    DBEQ            reduce using rule 9 (expr -> LPAREN expr INTDIV expr RPAREN .)
    EXEQ            reduce using rule 9 (expr -> LPAREN expr INTDIV expr RPAREN .)
    LT              reduce using rule 9 (expr -> LPAREN expr INTDIV expr RPAREN .)
    GT              reduce using rule 9 (expr -> LPAREN expr INTDIV expr RPAREN .)
    $end            reduce using rule 9 (expr -> LPAREN expr INTDIV expr RPAREN .)
    RPAREN          reduce using rule 9 (expr -> LPAREN expr INTDIV expr RPAREN .)
    COMMA           reduce using rule 9 (expr -> LPAREN expr INTDIV expr RPAREN .)
    ELSE            reduce using rule 9 (expr -> LPAREN expr INTDIV expr RPAREN .)
    RCURLY          reduce using rule 9 (expr -> LPAREN expr INTDIV expr RPAREN .)
    LINE            reduce using rule 9 (expr -> LPAREN expr INTDIV expr RPAREN .)


state 88

    (10) expr -> LPAREN expr DBEQ expr RPAREN .

    MULTIPLY        reduce using rule 10 (expr -> LPAREN expr DBEQ expr RPAREN .)
    DIVIDE          reduce using rule 10 (expr -> LPAREN expr DBEQ expr RPAREN .)
    INTDIV          reduce using rule 10 (expr -> LPAREN expr DBEQ expr RPAREN .)
    PLUS            reduce using rule 10 (expr -> LPAREN expr DBEQ expr RPAREN .)
    MINUS           reduce using rule 10 (expr -> LPAREN expr DBEQ expr RPAREN .)
    DBEQ            reduce using rule 10 (expr -> LPAREN expr DBEQ expr RPAREN .)
    EXEQ            reduce using rule 10 (expr -> LPAREN expr DBEQ expr RPAREN .)
    LT              reduce using rule 10 (expr -> LPAREN expr DBEQ expr RPAREN .)
    GT              reduce using rule 10 (expr -> LPAREN expr DBEQ expr RPAREN .)
    $end            reduce using rule 10 (expr -> LPAREN expr DBEQ expr RPAREN .)
    RPAREN          reduce using rule 10 (expr -> LPAREN expr DBEQ expr RPAREN .)
    COMMA           reduce using rule 10 (expr -> LPAREN expr DBEQ expr RPAREN .)
    ELSE            reduce using rule 10 (expr -> LPAREN expr DBEQ expr RPAREN .)
    RCURLY          reduce using rule 10 (expr -> LPAREN expr DBEQ expr RPAREN .)
    LINE            reduce using rule 10 (expr -> LPAREN expr DBEQ expr RPAREN .)


state 89

    (11) expr -> LPAREN expr EXEQ expr RPAREN .

    MULTIPLY        reduce using rule 11 (expr -> LPAREN expr EXEQ expr RPAREN .)
    DIVIDE          reduce using rule 11 (expr -> LPAREN expr EXEQ expr RPAREN .)
    INTDIV          reduce using rule 11 (expr -> LPAREN expr EXEQ expr RPAREN .)
    PLUS            reduce using rule 11 (expr -> LPAREN expr EXEQ expr RPAREN .)
    MINUS           reduce using rule 11 (expr -> LPAREN expr EXEQ expr RPAREN .)
    DBEQ            reduce using rule 11 (expr -> LPAREN expr EXEQ expr RPAREN .)
    EXEQ            reduce using rule 11 (expr -> LPAREN expr EXEQ expr RPAREN .)
    LT              reduce using rule 11 (expr -> LPAREN expr EXEQ expr RPAREN .)
    GT              reduce using rule 11 (expr -> LPAREN expr EXEQ expr RPAREN .)
    $end            reduce using rule 11 (expr -> LPAREN expr EXEQ expr RPAREN .)
    RPAREN          reduce using rule 11 (expr -> LPAREN expr EXEQ expr RPAREN .)
    COMMA           reduce using rule 11 (expr -> LPAREN expr EXEQ expr RPAREN .)
    ELSE            reduce using rule 11 (expr -> LPAREN expr EXEQ expr RPAREN .)
    RCURLY          reduce using rule 11 (expr -> LPAREN expr EXEQ expr RPAREN .)
    LINE            reduce using rule 11 (expr -> LPAREN expr EXEQ expr RPAREN .)


state 90

    (12) expr -> LPAREN expr LT expr RPAREN .

    MULTIPLY        reduce using rule 12 (expr -> LPAREN expr LT expr RPAREN .)
    DIVIDE          reduce using rule 12 (expr -> LPAREN expr LT expr RPAREN .)
    INTDIV          reduce using rule 12 (expr -> LPAREN expr LT expr RPAREN .)
    PLUS            reduce using rule 12 (expr -> LPAREN expr LT expr RPAREN .)
    MINUS           reduce using rule 12 (expr -> LPAREN expr LT expr RPAREN .)
    DBEQ            reduce using rule 12 (expr -> LPAREN expr LT expr RPAREN .)
    EXEQ            reduce using rule 12 (expr -> LPAREN expr LT expr RPAREN .)
    LT              reduce using rule 12 (expr -> LPAREN expr LT expr RPAREN .)
    GT              reduce using rule 12 (expr -> LPAREN expr LT expr RPAREN .)
    $end            reduce using rule 12 (expr -> LPAREN expr LT expr RPAREN .)
    RPAREN          reduce using rule 12 (expr -> LPAREN expr LT expr RPAREN .)
    COMMA           reduce using rule 12 (expr -> LPAREN expr LT expr RPAREN .)
    ELSE            reduce using rule 12 (expr -> LPAREN expr LT expr RPAREN .)
    RCURLY          reduce using rule 12 (expr -> LPAREN expr LT expr RPAREN .)
    LINE            reduce using rule 12 (expr -> LPAREN expr LT expr RPAREN .)


state 91

    (13) expr -> LPAREN expr GT expr RPAREN .

    MULTIPLY        reduce using rule 13 (expr -> LPAREN expr GT expr RPAREN .)
    DIVIDE          reduce using rule 13 (expr -> LPAREN expr GT expr RPAREN .)
    INTDIV          reduce using rule 13 (expr -> LPAREN expr GT expr RPAREN .)
    PLUS            reduce using rule 13 (expr -> LPAREN expr GT expr RPAREN .)
    MINUS           reduce using rule 13 (expr -> LPAREN expr GT expr RPAREN .)
    DBEQ            reduce using rule 13 (expr -> LPAREN expr GT expr RPAREN .)
    EXEQ            reduce using rule 13 (expr -> LPAREN expr GT expr RPAREN .)
    LT              reduce using rule 13 (expr -> LPAREN expr GT expr RPAREN .)
    GT              reduce using rule 13 (expr -> LPAREN expr GT expr RPAREN .)
    $end            reduce using rule 13 (expr -> LPAREN expr GT expr RPAREN .)
    RPAREN          reduce using rule 13 (expr -> LPAREN expr GT expr RPAREN .)
    COMMA           reduce using rule 13 (expr -> LPAREN expr GT expr RPAREN .)
    ELSE            reduce using rule 13 (expr -> LPAREN expr GT expr RPAREN .)
    RCURLY          reduce using rule 13 (expr -> LPAREN expr GT expr RPAREN .)
    LINE            reduce using rule 13 (expr -> LPAREN expr GT expr RPAREN .)


state 92

    (31) multi_expr -> multi_expr COMMA expr .
    (17) expr -> expr . MULTIPLY expr
    (18) expr -> expr . DIVIDE expr
    (19) expr -> expr . INTDIV expr
    (20) expr -> expr . PLUS expr
    (21) expr -> expr . MINUS expr
    (22) expr -> expr . DBEQ expr
    (23) expr -> expr . EXEQ expr
    (24) expr -> expr . LT expr
    (25) expr -> expr . GT expr

    RPAREN          reduce using rule 31 (multi_expr -> multi_expr COMMA expr .)
    COMMA           reduce using rule 31 (multi_expr -> multi_expr COMMA expr .)
    MULTIPLY        shift and go to state 19
    DIVIDE          shift and go to state 20
    INTDIV          shift and go to state 21
    PLUS            shift and go to state 22
    MINUS           shift and go to state 23
    DBEQ            shift and go to state 24
    EXEQ            shift and go to state 25
    LT              shift and go to state 26
    GT              shift and go to state 27


state 93

    (39) func_assign -> FUNC ID LPAREN multi_id RPAREN . LCURLY multi_calc RCURLY

    LCURLY          shift and go to state 97


state 94

    (34) multi_id -> multi_id COMMA . ID

    ID              shift and go to state 98


state 95

    (36) calc -> IF LPAREN expr RPAREN LCURLY multi_calc . ELSE multi_calc RCURLY
    (37) calc -> IF LPAREN expr RPAREN LCURLY multi_calc . RCURLY
    (15) multi_calc -> multi_calc . LINE calc

    ELSE            shift and go to state 99
    RCURLY          shift and go to state 100
    LINE            shift and go to state 101


state 96

    (16) multi_calc -> calc .

    ELSE            reduce using rule 16 (multi_calc -> calc .)
    RCURLY          reduce using rule 16 (multi_calc -> calc .)
    LINE            reduce using rule 16 (multi_calc -> calc .)


state 97

    (39) func_assign -> FUNC ID LPAREN multi_id RPAREN LCURLY . multi_calc RCURLY
    (15) multi_calc -> . multi_calc LINE calc
    (16) multi_calc -> . calc
    (1) calc -> . expr
    (2) calc -> . var_assign
    (3) calc -> . func_assign
    (4) calc -> . cout
    (36) calc -> . IF LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY
    (37) calc -> . IF LPAREN expr RPAREN LCURLY multi_calc RCURLY
    (43) calc -> . ID LPAREN multi_expr RPAREN
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID
    (38) var_assign -> . LET ID EQ expr
    (42) var_assign -> . ID DBLT INPUT
    (39) func_assign -> . FUNC ID LPAREN multi_id RPAREN LCURLY multi_calc RCURLY
    (40) cout -> . OUTPUT DBLT expr

    IF              shift and go to state 6
    ID              shift and go to state 8
    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    LET             shift and go to state 16
    FUNC            shift and go to state 17
    OUTPUT          shift and go to state 18

    multi_calc                     shift and go to state 102
    calc                           shift and go to state 96
    expr                           shift and go to state 2
    var_assign                     shift and go to state 3
    func_assign                    shift and go to state 4
    cout                           shift and go to state 5

state 98

    (34) multi_id -> multi_id COMMA ID .

    RPAREN          reduce using rule 34 (multi_id -> multi_id COMMA ID .)
    COMMA           reduce using rule 34 (multi_id -> multi_id COMMA ID .)


state 99

    (36) calc -> IF LPAREN expr RPAREN LCURLY multi_calc ELSE . multi_calc RCURLY
    (15) multi_calc -> . multi_calc LINE calc
    (16) multi_calc -> . calc
    (1) calc -> . expr
    (2) calc -> . var_assign
    (3) calc -> . func_assign
    (4) calc -> . cout
    (36) calc -> . IF LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY
    (37) calc -> . IF LPAREN expr RPAREN LCURLY multi_calc RCURLY
    (43) calc -> . ID LPAREN multi_expr RPAREN
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID
    (38) var_assign -> . LET ID EQ expr
    (42) var_assign -> . ID DBLT INPUT
    (39) func_assign -> . FUNC ID LPAREN multi_id RPAREN LCURLY multi_calc RCURLY
    (40) cout -> . OUTPUT DBLT expr

    IF              shift and go to state 6
    ID              shift and go to state 8
    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    LET             shift and go to state 16
    FUNC            shift and go to state 17
    OUTPUT          shift and go to state 18

    expr                           shift and go to state 2
    multi_calc                     shift and go to state 103
    calc                           shift and go to state 96
    var_assign                     shift and go to state 3
    func_assign                    shift and go to state 4
    cout                           shift and go to state 5

state 100

    (37) calc -> IF LPAREN expr RPAREN LCURLY multi_calc RCURLY .

    $end            reduce using rule 37 (calc -> IF LPAREN expr RPAREN LCURLY multi_calc RCURLY .)
    ELSE            reduce using rule 37 (calc -> IF LPAREN expr RPAREN LCURLY multi_calc RCURLY .)
    RCURLY          reduce using rule 37 (calc -> IF LPAREN expr RPAREN LCURLY multi_calc RCURLY .)
    LINE            reduce using rule 37 (calc -> IF LPAREN expr RPAREN LCURLY multi_calc RCURLY .)


state 101

    (15) multi_calc -> multi_calc LINE . calc
    (1) calc -> . expr
    (2) calc -> . var_assign
    (3) calc -> . func_assign
    (4) calc -> . cout
    (36) calc -> . IF LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY
    (37) calc -> . IF LPAREN expr RPAREN LCURLY multi_calc RCURLY
    (43) calc -> . ID LPAREN multi_expr RPAREN
    (5) expr -> . LPAREN expr PLUS expr RPAREN
    (6) expr -> . LPAREN expr MINUS expr RPAREN
    (7) expr -> . LPAREN expr MULTIPLY expr RPAREN
    (8) expr -> . LPAREN expr DIVIDE expr RPAREN
    (9) expr -> . LPAREN expr INTDIV expr RPAREN
    (10) expr -> . LPAREN expr DBEQ expr RPAREN
    (11) expr -> . LPAREN expr EXEQ expr RPAREN
    (12) expr -> . LPAREN expr LT expr RPAREN
    (13) expr -> . LPAREN expr GT expr RPAREN
    (14) expr -> . LPAREN EX expr RPAREN
    (17) expr -> . expr MULTIPLY expr
    (18) expr -> . expr DIVIDE expr
    (19) expr -> . expr INTDIV expr
    (20) expr -> . expr PLUS expr
    (21) expr -> . expr MINUS expr
    (22) expr -> . expr DBEQ expr
    (23) expr -> . expr EXEQ expr
    (24) expr -> . expr LT expr
    (25) expr -> . expr GT expr
    (26) expr -> . EX expr
    (27) expr -> . PLUS expr
    (28) expr -> . MINUS expr
    (29) expr -> . INT
    (30) expr -> . FLOAT
    (33) expr -> . STRING
    (41) expr -> . INPUT
    (44) expr -> . ID
    (38) var_assign -> . LET ID EQ expr
    (42) var_assign -> . ID DBLT INPUT
    (39) func_assign -> . FUNC ID LPAREN multi_id RPAREN LCURLY multi_calc RCURLY
    (40) cout -> . OUTPUT DBLT expr

    IF              shift and go to state 6
    ID              shift and go to state 8
    LPAREN          shift and go to state 7
    EX              shift and go to state 11
    PLUS            shift and go to state 9
    MINUS           shift and go to state 10
    INT             shift and go to state 12
    FLOAT           shift and go to state 13
    STRING          shift and go to state 14
    INPUT           shift and go to state 15
    LET             shift and go to state 16
    FUNC            shift and go to state 17
    OUTPUT          shift and go to state 18

    calc                           shift and go to state 104
    expr                           shift and go to state 2
    var_assign                     shift and go to state 3
    func_assign                    shift and go to state 4
    cout                           shift and go to state 5

state 102

    (39) func_assign -> FUNC ID LPAREN multi_id RPAREN LCURLY multi_calc . RCURLY
    (15) multi_calc -> multi_calc . LINE calc

    RCURLY          shift and go to state 105
    LINE            shift and go to state 101


state 103

    (36) calc -> IF LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc . RCURLY
    (15) multi_calc -> multi_calc . LINE calc

    RCURLY          shift and go to state 106
    LINE            shift and go to state 101


state 104

    (15) multi_calc -> multi_calc LINE calc .

    ELSE            reduce using rule 15 (multi_calc -> multi_calc LINE calc .)
    RCURLY          reduce using rule 15 (multi_calc -> multi_calc LINE calc .)
    LINE            reduce using rule 15 (multi_calc -> multi_calc LINE calc .)


state 105

    (39) func_assign -> FUNC ID LPAREN multi_id RPAREN LCURLY multi_calc RCURLY .

    $end            reduce using rule 39 (func_assign -> FUNC ID LPAREN multi_id RPAREN LCURLY multi_calc RCURLY .)
    ELSE            reduce using rule 39 (func_assign -> FUNC ID LPAREN multi_id RPAREN LCURLY multi_calc RCURLY .)
    RCURLY          reduce using rule 39 (func_assign -> FUNC ID LPAREN multi_id RPAREN LCURLY multi_calc RCURLY .)
    LINE            reduce using rule 39 (func_assign -> FUNC ID LPAREN multi_id RPAREN LCURLY multi_calc RCURLY .)


state 106

    (36) calc -> IF LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY .

    $end            reduce using rule 36 (calc -> IF LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY .)
    ELSE            reduce using rule 36 (calc -> IF LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY .)
    RCURLY          reduce using rule 36 (calc -> IF LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY .)
    LINE            reduce using rule 36 (calc -> IF LPAREN expr RPAREN LCURLY multi_calc ELSE multi_calc RCURLY .)


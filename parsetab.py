
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLPARENRPARENleftPLUSMINUSleftMULTIPLYDIVIDEINTDIVleftDBEQEXEQLTGTleftEXDBEQ DBLT DIVIDE EQ EX EXEQ FLOAT GT ID IF INPUT INT INTDIV LET LPAREN LT MINUS MULTIPLY OUTPUT PLUS RPAREN SEMI\n    calc : expr\n         | var_assign\n         | cout\n    \n    expr : LPAREN expr PLUS expr RPAREN\n         | LPAREN expr MINUS expr RPAREN\n         | LPAREN expr MULTIPLY expr RPAREN\n         | LPAREN expr DIVIDE expr RPAREN\n         | LPAREN expr INTDIV expr RPAREN\n\n         | LPAREN expr DBEQ expr RPAREN\n         | LPAREN expr EXEQ expr RPAREN\n         | LPAREN expr LT expr RPAREN\n         | LPAREN expr GT expr RPAREN\n         | LPAREN EX expr RPAREN\n    \n    expr : expr MULTIPLY expr\n         | expr DIVIDE expr\n         | expr INTDIV expr\n         | expr PLUS expr\n         | expr MINUS expr\n\n         | expr DBEQ expr\n         | expr EXEQ expr\n         | expr LT expr\n         | expr GT expr\n         | EX expr\n    \n    expr : PLUS expr\n         | MINUS expr\n    \n    expr : INT\n         | FLOAT\n    \n    cout : IF LPAREN expr RPAREN SEMI cout\n    \n    var_assign : LET ID EQ expr\n    \n    cout : OUTPUT DBLT expr\n    \n    expr : INPUT\n    var_assign : ID DBLT INPUT\n    \n    expr : ID\n    '
    
_lr_action_items = {'LPAREN':([0,5,6,7,8,14,16,17,18,19,20,21,22,23,24,26,33,34,44,45,46,47,48,49,50,51,52,55,],[5,5,5,5,5,33,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'EX':([0,5,6,7,8,16,17,18,19,20,21,22,23,24,26,33,34,44,45,46,47,48,49,50,51,52,55,],[8,26,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'PLUS':([0,2,5,6,7,8,9,10,11,12,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,],[6,19,6,6,6,6,-26,-27,-31,-33,6,6,6,6,6,6,6,6,6,44,6,-33,-24,-25,-23,6,6,-14,-15,-16,-17,-18,-19,-20,-21,-22,6,6,6,6,6,6,6,6,6,-23,6,19,19,-17,-18,-14,-15,-16,-19,-20,-21,-22,-13,19,-4,-5,-6,-7,-8,-9,-10,-11,-12,]),'MINUS':([0,2,5,6,7,8,9,10,11,12,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,],[7,20,7,7,7,7,-26,-27,-31,-33,7,7,7,7,7,7,7,7,7,45,7,-33,-24,-25,-23,7,7,-14,-15,-16,-17,-18,-19,-20,-21,-22,7,7,7,7,7,7,7,7,7,-23,7,20,20,-17,-18,-14,-15,-16,-19,-20,-21,-22,-13,20,-4,-5,-6,-7,-8,-9,-10,-11,-12,]),'INT':([0,5,6,7,8,16,17,18,19,20,21,22,23,24,26,33,34,44,45,46,47,48,49,50,51,52,55,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'FLOAT':([0,5,6,7,8,16,17,18,19,20,21,22,23,24,26,33,34,44,45,46,47,48,49,50,51,52,55,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'INPUT':([0,5,6,7,8,16,17,18,19,20,21,22,23,24,26,31,33,34,44,45,46,47,48,49,50,51,52,55,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,54,11,11,11,11,11,11,11,11,11,11,11,11,]),'ID':([0,5,6,7,8,13,16,17,18,19,20,21,22,23,24,26,33,34,44,45,46,47,48,49,50,51,52,55,],[12,27,27,27,27,32,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'LET':([0,],[13,]),'IF':([0,79,],[14,14,]),'OUTPUT':([0,79,],[15,15,]),'$end':([1,2,3,4,9,10,11,12,27,28,29,30,35,36,37,38,39,40,41,42,43,54,57,67,68,70,71,72,73,74,75,76,77,78,80,],[0,-1,-2,-3,-26,-27,-31,-33,-33,-24,-25,-23,-14,-15,-16,-17,-18,-19,-20,-21,-22,-32,-30,-13,-29,-4,-5,-6,-7,-8,-9,-10,-11,-12,-28,]),'MULTIPLY':([2,9,10,11,12,25,27,28,29,30,35,36,37,38,39,40,41,42,43,53,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,],[16,-26,-27,-31,-33,46,-33,16,16,-23,-14,-15,-16,16,16,-19,-20,-21,-22,-23,16,16,16,16,-14,-15,-16,-19,-20,-21,-22,-13,16,-4,-5,-6,-7,-8,-9,-10,-11,-12,]),'DIVIDE':([2,9,10,11,12,25,27,28,29,30,35,36,37,38,39,40,41,42,43,53,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,],[17,-26,-27,-31,-33,47,-33,17,17,-23,-14,-15,-16,17,17,-19,-20,-21,-22,-23,17,17,17,17,-14,-15,-16,-19,-20,-21,-22,-13,17,-4,-5,-6,-7,-8,-9,-10,-11,-12,]),'INTDIV':([2,9,10,11,12,25,27,28,29,30,35,36,37,38,39,40,41,42,43,53,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,],[18,-26,-27,-31,-33,48,-33,18,18,-23,-14,-15,-16,18,18,-19,-20,-21,-22,-23,18,18,18,18,-14,-15,-16,-19,-20,-21,-22,-13,18,-4,-5,-6,-7,-8,-9,-10,-11,-12,]),'DBEQ':([2,9,10,11,12,25,27,28,29,30,35,36,37,38,39,40,41,42,43,53,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,],[21,-26,-27,-31,-33,49,-33,21,21,-23,21,21,21,21,21,-19,-20,-21,-22,-23,21,21,21,21,21,21,21,-19,-20,-21,-22,-13,21,-4,-5,-6,-7,-8,-9,-10,-11,-12,]),'EXEQ':([2,9,10,11,12,25,27,28,29,30,35,36,37,38,39,40,41,42,43,53,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,],[22,-26,-27,-31,-33,50,-33,22,22,-23,22,22,22,22,22,-19,-20,-21,-22,-23,22,22,22,22,22,22,22,-19,-20,-21,-22,-13,22,-4,-5,-6,-7,-8,-9,-10,-11,-12,]),'LT':([2,9,10,11,12,25,27,28,29,30,35,36,37,38,39,40,41,42,43,53,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,],[23,-26,-27,-31,-33,51,-33,23,23,-23,23,23,23,23,23,-19,-20,-21,-22,-23,23,23,23,23,23,23,23,-19,-20,-21,-22,-13,23,-4,-5,-6,-7,-8,-9,-10,-11,-12,]),'GT':([2,9,10,11,12,25,27,28,29,30,35,36,37,38,39,40,41,42,43,53,56,57,58,59,60,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,],[24,-26,-27,-31,-33,52,-33,24,24,-23,24,24,24,24,24,-19,-20,-21,-22,-23,24,24,24,24,24,24,24,-19,-20,-21,-22,-13,24,-4,-5,-6,-7,-8,-9,-10,-11,-12,]),'RPAREN':([9,10,11,27,28,29,30,35,36,37,38,39,40,41,42,43,53,56,58,59,60,61,62,63,64,65,66,67,70,71,72,73,74,75,76,77,78,],[-26,-27,-31,-33,-24,-25,-23,-14,-15,-16,-17,-18,-19,-20,-21,-22,67,69,70,71,72,73,74,75,76,77,78,-13,-4,-5,-6,-7,-8,-9,-10,-11,-12,]),'DBLT':([12,15,],[31,34,]),'EQ':([32,],[55,]),'SEMI':([69,],[79,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'calc':([0,],[1,]),'expr':([0,5,6,7,8,16,17,18,19,20,21,22,23,24,26,33,34,44,45,46,47,48,49,50,51,52,55,],[2,25,28,29,30,35,36,37,38,39,40,41,42,43,53,56,57,58,59,60,61,62,63,64,65,66,68,]),'var_assign':([0,],[3,]),'cout':([0,79,],[4,80,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> calc","S'",1,None,None,None),
  ('calc -> expr','calc',1,'p_calc','Lexer.py',146),
  ('calc -> var_assign','calc',1,'p_calc','Lexer.py',147),
  ('calc -> cout','calc',1,'p_calc','Lexer.py',148),
  ('expr -> LPAREN expr PLUS expr RPAREN','expr',5,'p_expr','Lexer.py',166),
  ('expr -> LPAREN expr MINUS expr RPAREN','expr',5,'p_expr','Lexer.py',167),
  ('expr -> LPAREN expr MULTIPLY expr RPAREN','expr',5,'p_expr','Lexer.py',168),
  ('expr -> LPAREN expr DIVIDE expr RPAREN','expr',5,'p_expr','Lexer.py',169),
  ('expr -> LPAREN expr INTDIV expr RPAREN','expr',5,'p_expr','Lexer.py',170),
  ('expr -> LPAREN expr DBEQ expr RPAREN','expr',5,'p_expr','Lexer.py',172),
  ('expr -> LPAREN expr EXEQ expr RPAREN','expr',5,'p_expr','Lexer.py',173),
  ('expr -> LPAREN expr LT expr RPAREN','expr',5,'p_expr','Lexer.py',174),
  ('expr -> LPAREN expr GT expr RPAREN','expr',5,'p_expr','Lexer.py',175),
  ('expr -> LPAREN EX expr RPAREN','expr',4,'p_expr','Lexer.py',176),
  ('expr -> expr MULTIPLY expr','expr',3,'p_bin_op','Lexer.py',186),
  ('expr -> expr DIVIDE expr','expr',3,'p_bin_op','Lexer.py',187),
  ('expr -> expr INTDIV expr','expr',3,'p_bin_op','Lexer.py',188),
  ('expr -> expr PLUS expr','expr',3,'p_bin_op','Lexer.py',189),
  ('expr -> expr MINUS expr','expr',3,'p_bin_op','Lexer.py',190),
  ('expr -> expr DBEQ expr','expr',3,'p_bin_op','Lexer.py',192),
  ('expr -> expr EXEQ expr','expr',3,'p_bin_op','Lexer.py',193),
  ('expr -> expr LT expr','expr',3,'p_bin_op','Lexer.py',194),
  ('expr -> expr GT expr','expr',3,'p_bin_op','Lexer.py',195),
  ('expr -> EX expr','expr',2,'p_bin_op','Lexer.py',196),
  ('expr -> PLUS expr','expr',2,'p_unary_op','Lexer.py',206),
  ('expr -> MINUS expr','expr',2,'p_unary_op','Lexer.py',207),
  ('expr -> INT','expr',1,'p_factor','Lexer.py',214),
  ('expr -> FLOAT','expr',1,'p_factor','Lexer.py',215),
  ('cout -> IF LPAREN expr RPAREN SEMI cout','cout',6,'p_flow','Lexer.py',222),
  ('var_assign -> LET ID EQ expr','var_assign',4,'p_var_assign','Lexer.py',229),
  ('cout -> OUTPUT DBLT expr','cout',3,'p_cout','Lexer.py',236),
  ('expr -> INPUT','expr',1,'p_cin','Lexer.py',243),
  ('var_assign -> ID DBLT INPUT','var_assign',3,'p_cin','Lexer.py',244),
  ('expr -> ID','expr',1,'p_var_access','Lexer.py',254),
]
